{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"start-django Docs","text":"<p>start-django.fly.dev <code>^3.11</code> <code>4.2</code> +  <code>fly.io</code> personal boilerplate, ft.:</p> <ol> <li>UI from django-fragments attempting locality-of-behavior:<ol> <li><code>{% icon %}</code> - <code>&lt;svg&gt;</code> tag combiner</li> <li><code>{% themer %}</code> - <code>&lt;button onclick=toggleTheme()&gt;</code> enclosing  two <code>{% icon %}s</code>.</li> <li><code>{% hput %}</code> - TailwindCSS + widget-tweakable <code>&lt;input&gt;</code></li> <li><code>{% sel %}</code> - hyperscript w/ aria-* <code>&lt;select&gt;</code></li> <li><code>{% include '_msg.html' ... %}</code> - -htmx messages</li> </ol> </li> <li>Deployable fly.toml based on compose.yml <code>services</code>:<ol> <li><code>web</code>:  toggle settings: dev | test | prod</li> <li><code>db</code>: sqlite default, postgres-configurable</li> <li><code>worker</code>:  huey background tasks</li> <li><code>redis</code>: message broker</li> </ol> </li> <li>Connected Custom User Model:<ol> <li>django-allauth logic where UI templates have been styled.</li> <li>python-postmark transactional emails (e.g. confirm auth, change password, etc.)</li> <li>1-to-1 Profile with  <code>ImageField</code> (custom storage class to host/serve Cloudflare Images)</li> <li>foreign key <code>UserConsent</code> model for Terms of Use.</li> </ol> </li> </ol>  just start unpack poetry, npm, vscode, just, ^3.11 python<pre><code># 'just' wraps initial setup into a single command\ngh repo clone justmars/start-django dj \\\n&amp;&amp; cd dj \\\n&amp;&amp; just start # (1)\n</code></pre> <ol> <li>When copy/pasting, just change <code>dj</code> to whatever folder. See  to unpack steps in this recipe which includes virtual environment (<code>.venv</code>) setup via <code>poetry</code>; installation of tailwind with <code>npm</code> and running the build step with <code>npx tailwindcss</code>; and initial  management commands: <code>collectstatic</code>, <code>compress</code>, <code>makemigrations</code>, <code>migrate</code> and <code>runserver_plus</code> (from <code>django_extensions</code>).</li> </ol> Setup using native commmands without 'just'; requires: poetry, npm, python ^3.11<pre><code>gh repo clone justmars/start-django &amp;&amp; cd start-django\n\ncp ./etc/env.example.0.dev .env # (1)\nnpm install -D tailwindcss \\\n@tailwindcss/typography \\\n@tailwindcss/forms \\\n@tailwindcss/aspect-ratio \\\n@tailwindcss/container-queries # (2)\nnpx tailwindcss \\\n-i ./src/static/css/input.css \\\n-o ./src/static/css/output.css # (3)\npoetry install &amp;&amp; \\\npoetry export -f requirements.txt \\\n--without-hashes \\\n--output src/requirements.txt \\\n&amp;&amp; poetry shell # (4)\ncd src\npython manage.py makemigrations # (5)\npython manage.py migrate # (6)\npython manage.py collectstatic --noinput # (7)\npython manage.py compress --force # (8)\npre-commit autoupdate # ensure updated config\npre-commit run --all-files # applies: ruff, black, djhtml\npytest # will use pyproject.toml args\npython manage.py runserver_plus # (9)\n</code></pre> <ol> <li>Set example file to .env to make it easy to supply env vars.</li> <li>This will create <code>/nodemodules/</code> (<code>.gitignore</code>ed) containing TailwindCSS dependencies.</li> <li>Invokes <code>/src/static/css/input.css</code> + <code>./tailwind.config.js</code> to build <code>/static/css/output.css</code>. See full process</li> <li>Installs virtual environment in a local <code>.venv</code> (assumes <code>poetry config --list</code> shows <code>virtualenvs.create = true</code> and <code>virtualenvs.in-project = true</code>) then creates <code>poetry.lock</code>, ensures a copy of the requirements.txt file is copied into <code>/src</code></li> <li>Prepares models declared in <code>src/pages</code> and <code>/src/profiles</code> as sql statements found in <code>/migrations</code> folder of each app. Since I didn't declare a <code>DATABASE_URL</code> in the environment, this will default to creating an empty <code>src/db.sqlite</code></li> <li>Sets up tables in default sqlite database (unless a <code>DATABASE_URL</code> pointing to a local postgres db is set in <code>.env</code>)</li> <li>Populates <code>/src/staticfiles</code> directory</li> <li>Creates compressed css / js manifest in <code>/src/static/CACHE</code></li> <li>Django management command to launch django.setup(). No need to setup <code>.env</code> values since default local settings will be used as a quickstart example. Uses django_extention's runserver_plus</li> </ol> <p>Details</p> <p>After initial setup:</p> <ol> <li>Personalize installation</li> <li>Setup services</li> <li>Review settings</li> <li>Evaluate design</li> <li>Consider contexts[^1], e.g. containers</li> <li>Deploy site</li> </ol>"},{"location":"design/","title":"Design Choices","text":"<p>Functional, local chaos</p> <p>Combining utility classes in html markup results in utter chaos. It makes code look ugly. But...there is a functional appeal to it that's growing on me. Perhaps its strongest suit is what I understand to be grug-compatible locality. Think \"lady in the red dress\" in the first Matrix: ostentibly unpleasant yet quite readable.</p>"},{"location":"design/#tailwindconfigjs-dawn-dusk","title":"<code>tailwind.config.js</code>: dawn / dusk","text":"<p>I use <code>dawn</code> to signify the light theme and <code>dusk</code> to signify the dark theme. The words are uncommon enough that it makes it easy to replace them all in a wholesale find-all-and-replace approach via the IDE, or simply to reuse them by modifying the values found in the Tailwind config file:</p> /tailwind.config.js<pre><code>module.exports = {\ndarkMode: \"class\", // (1)\ntheme: {\nextend: {\ncolors: {\ndawn: { // (2)\ndarker: \"#15803d\", // green-700\nDEFAULT: \"#16a34a\", // green-600\nmuted: \"#22c55e\", // green-500\nlighter: \"#86efac\", // green-300\n},\ndusk: {\ndarker: \"#7e22ce\", // purple-700\nDEFAULT: \"#9333ea\", // purple-600\nmuted: \"#a855f7\", // purple-500\nlighter: \"#d8b4fe\", // purple-300\n},\ngrayed: {\ndarker: \"#334155\", // slate-700\nDEFAULT: \"#475569\", // slate-600\nmuted: \"#94a3b8\", // slate-400\nlighter: \"#cbd5e1\", // slate-300\n},\n},\n},\n},\n}\n</code></pre> <ol> <li>Enables theme switching by modifying <code>&lt;html&gt;</code> tag</li> <li>The color-number convention, e.g. green-500 refers to the designation found in TailwindCSS colors.</li> </ol> <p>Note that the named themes can utilize suffixes and prefixes that TailwindCSS is known for, e.g. with <code>bg-dawn</code>, <code>dawn</code> is a variable I made up, whereas <code>bg</code> as a prefix will always mean apply a background color of CSS variable <code>dawn</code>.</p> <p>It also becomes easier to implement a custom partial template, particularly with dashed notation that specifies custom accents like <code>muted</code>, <code>lighter</code>, and <code>darker</code>... as well as generic tailwind prefixes like <code>hover</code>, <code>focus-visible</code>, etc.</p>"},{"location":"design/#inputcss-definition-for-buttons-forms","title":"<code>input.css</code> definition for buttons, forms","text":"<p>Most of the declarations of utility classes generally happen in common html files.</p> <p>The definitions of these declarations are automatically made in a single <code>output.css</code> file, assuming the build step is running.</p> <p>However, the <code>input.css</code> makes initial adjustments to commonly styled elements:</p> Buttons and forms<pre><code>@layer base {\n[type=\"text\"],\n[type=\"email\"],\n[type=\"url\"],\n/* etc.; see override source (1) */\n{\n@apply mt-2.5 block w-full rounded-md border-0 px-3.5 py-2 text-sm/6 text-grayed-darker dark:text-grayed-lighter\n/* other tailwind classes */\n}\nbutton.btn[data-btn=\"primary\"], a.btn[type=\"button\"][data-btn=\"primary\"] {\n@apply text-green-100 dark:text-purple-100 bg-dawn dark:bg-dusk\n/* other tailwind classes */\n}\n}\n</code></pre> <ol> <li>Overrides selectors foudn in <code>/node_modules/@tailwindcss/forms/src/index.js</code></li> </ol> <p>The controversial <code>@apply</code></p> <p>The @apply directive is considered by TailwindCSS maker to be ill-conceived but I find it rather useful to style base elements: specifically buttons and form fields described above. And typing these all out in using the theme directive seems overly verbose. I felt the same about the Tailwind utility classes when they first came out so maybe I'll grow to like the <code>theme()</code> convention in time.</p>"},{"location":"design/#django-fragments-for-skeletal-partials","title":"<code>django-fragments</code> for skeletal partials","text":"<p>The layout of DOM nodes of html partials is handled by django-fragments, especially for icons. The idea is to make this library handle the construction of a building... so that it's ready for a paint job afterwards. See existing partials for:</p> <ol> <li> <p><code>{% icon %}</code> - idiomatic <code>&lt;svg&gt;</code> combiner with neighboring / parent tags</p> before:  fragmentafter: html  Invocation via Django Template Language<pre><code>{% load fragments %}{# re: 'x_mark_mini' (1), re: attributes (2) #}\n{% icon name='x_mark_mini' aria_hidden=\"true\" pre_text=\"Close menu\" pre_class=\"sr-only\"  %}\n</code></pre> <ol> <li><code>name='x_mark_mini'</code> refers to a heroicon (default) svg copy/pasted into a file named 'heroicon_x.html'</li> <li>The <code>aria_hidden</code> attribute is converted to <code>aria-hidden</code>, <code>pre_text</code> and <code>pre_class</code> means add a <code>&lt;span class='sr-only'&gt;Close menu&lt;span&gt;</code> before (pre)_ the svg icon.</li> </ol> Output HTML after the Template is populated with the Context.<pre><code>&lt;span class=\"sr-only\"&gt;Close menu&lt;/span&gt;\n&lt;svg aria-hidden=\"true\" class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" viewbox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n&lt;path d=\"M6 18L18 6M6 6l12 12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;\n&lt;/path&gt;\n&lt;/svg&gt;\n</code></pre> </li> <li> <p><code>{% themer %}</code> - <code>&lt;button onclick=toggleTheme()&gt;</code> enclosing  two <code>{% icon %}s</code>.</p> /tailwind.config.js<pre><code>module.exports = {\ndarkMode: \"class\", // theme switching via &lt;html&gt; class. // (1)\n}\n</code></pre> <ol> <li><code>{% themer %}</code> makes use of js functions <code>toggleTheme()</code> from django-fragments to change the class.</li> </ol> Overridding defaults<pre><code>{# re: css of sun and moon (1), re: css icon (2) #}\n{% themer icon1_name=\"sun\" icon1_css=\"dark:hidden icon\" icon2_name=\"moon\" icon2_css=\"hidden dark:block icon\" btn_kls=\"desktop flex justify-center items-center rounded-md transition\" %}\n</code></pre> <ol> <li>sun has <code>dark:hidden</code> + moon has <code>hidden dark:block</code>. TailwindCSS translation: if  <code>&lt;html class='dark'&gt;</code>: (a) hide sun icon via <code>:hidden</code>; (b) make moon icon visible via <code>:block</code>.</li> <li><code>icon</code> as a css class defined in <code>input.css</code></li> </ol> </li> <li> <p><code>{% hput %}</code> - A limited, simple <code>&lt;input&gt;</code>-based <code>BoundField</code> + related <code>&lt;label&gt;</code>, tags for <code>help_css</code>, <code>label_css</code> (complements  <code>django-widget-tweaks</code>).</p> before:  fragmentafter: html  Invocation via Django Template Language<pre><code>{% load fragments %}\n&lt;form method=\"post\" action=\"{% url 'account_signup' %}\"&gt;\n{% csrf_token %}\n{% hput form.email kls=\"fx\" %} {# (1) #}\n  ...\n&lt;/form&gt;\n</code></pre> <ol> <li>Must include a classname so that this can be detected by TailwindCSS. Enables future styling to related css targets, e.g. using <code>.fx</code>:<ol> <li><code>.fx &gt; ul.errorlist</code></li> <li><code>.fx &gt; p.help</code></li> <li><code>.fx &gt; label</code></li> </ol> </li> </ol> Output HTML after the Template is populated with the Context.<pre><code>&lt;form method=\"post\" action=\"/accounts/signup/\"&gt;\n&lt;input type=\"hidden\" name=\"csrfmiddlewaretoken\" value=\"xxx\"&gt;\n&lt;div class=\"fx\"&gt;\n&lt;label for=\"id_email\"&gt;Email&lt;/label&gt;\n&lt;input type=\"email\" name=\"email\" id=\"id_email\"&gt;\n&lt;/div&gt;\n  ...\n&lt;/form&gt;\n</code></pre> <p> v5.0</p> <p>The <code>BoundField.as_field_group()</code> seems like a viable alternative to use in the future.</p> TailwindCSS Forms Integration <p>With this setup, I can now use TailwindCSS forms plugin and override defaults in <code>input.css</code>:</p> input.css refers to the Tailwind input css file<pre><code>div.fx &gt; ul.errorlist { /* handles errors to be displayed post validation */\n@apply flex flex-col mt-1 ml-1 text-xs sm:text-sm tracking-wide text-pink-500 font-thin\n}\ndiv.fx &gt; p.help { /* handles the help text */\n@apply flex mt-1 ml-1 text-xs tracking-wide font-thin text-grayed dark:text-grayed-muted\n}\n@layer base {\n/* see forms plugin override */\n[type=\"text\"],\n[type=\"email\"],\n[type=\"url\"],\n[type=\"password\"],\n[type=\"number\"],\n[type=\"date\"],\n[type=\"datetime-local\"],\n[type=\"month\"],\n[type=\"search\"],\n[type=\"tel\"],\n[type=\"time\"],\n[type=\"week\"],\n[multiple],\ntextarea,\nselect,\n.faux-select /* works in tandem with sel.html */\n{\n@apply mt-2.5 block w-full rounded-md border-0\npx-3.5 py-2 text-sm/6\ntext-grayed-darker dark:text-grayed-lighter\nbg-white dark:bg-grayed-darker\nshadow-sm ring-1 ring-inset focus:outline-none focus:ring-1\nring-gray-300 dark:ring-grayed-darker\nfocus:ring-dawn dark:focus:ring-dusk\n}\n}\n</code></pre> <p>The generate route for forms is to have  render the entire form based on model declaration. For more granular controls, i.e. styling the individual components of a field, it's up to the user to reconstruct the form manually. <code>django-widget-tweaks</code> help adjust the field itself but the neighboring tags like <code>&lt;label&gt;</code>, the wrapping <code>&lt;div&gt;</code>, the help text and possible error messages, I think, still need to be managed individually.</p> <p>Since the field template from django-fragments is intentionally devoid of style, the only sources that need to be considered in the styling of the <code>{% hput %}</code> field are:</p> <ol> <li>any applicable tweaks done by django-widget-tweaks when <code>{% hput ... %}</code> is first invoked; and</li> <li>the styled input.css, specifically overriding TailwindCSS forms plugin.</li> </ol> </li> </ol>"},{"location":"design/#sample-template-tags-for-inseparable-partials","title":"Sample template tags for inseparable partials","text":"<p>There are some fragments however that cannot be easily separated from the css and javascript involved. They're defined in the <code>page</code>'s app and the <code>base.html</code> rather than in a third-party library like <code>django-fragments</code>. Consider:</p> <ol> <li> <p><code>{% sel %}</code> - aria-* and hyperscripted <code>&lt;select&gt;</code></p> Invocation<pre><code>{% load start %}{# (1) #}\n&lt;form&gt;\n{% hput fld=form.first_name cover=\"col-span-12 sm:col-span-3\" %}\n{% hput fld=form.last_name cover=\"col-span-12 sm:col-span-3\" %}\n{# (2) #}\n{% sel form.suffix idx='sfx-id' cover=\"col-span-12 sm:col-span-3\" %}\n  ...\n&lt;/form&gt;\n</code></pre> <ol> <li>Custom template tag from the \"pages\" app. See <code>src/pages/templatetags</code>.</li> <li>It's different from <code>input</code> since the template creates a faux select field with a <code>&lt;div&gt;</code> rather than using the native <code>&lt;select&gt;</code>. Since there can be many select fields in a given parent template, I introduce an identifier <code>idx</code> to explicitly segregate fields.</li> </ol> </li> <li> <p><code>{% include '_msg.html' ...  %}</code> -  messages as alerts</p> <p>This adopts the architecure for messages in django-fragments' <code>msg.html</code> to create a global alerts center so that hyperscripted-notifications can be added after an htmx swap.</p> Invocation<pre><code>{% load start %} {# (1) #}\n{% block content %}\n{% include '_msg.html' with messages=form.non_field_errors %} {# (2) #}\n{% endblock content %}\n</code></pre> <ol> <li>Custom template tag from the \"pages\" app. See <code>src/pages/templatetags</code>.</li> <li>Assuming template fragment of <code>HttpResponse</code> contains a <code>form</code>, I can isolate <code>non_field_errors</code> to render them as messages.</li> </ol> </li> </ol>"},{"location":"contexts/container/","title":"Containers","text":""},{"location":"contexts/container/#notes","title":"Notes","text":"<ol> <li>Removes the local machine as a factor of code so others can replicate local / repository contexts</li> <li>If there are multiple containers, compose it so that databases and third-party services like background workers are included in this ecosystem of containers, an orchestration</li> <li>Run an orchestration in the local machine but without using its resources</li> </ol> <p>Some additional thoughts</p> <p>Re: local/repo context, viewers have to reconstruct the local context by following documentation instructions (that may or may not work). In contrast, a composed orchestration of containers (via a <code>compose.yml</code>) encapsulates ostensibly running, interrelated code and its a matter of switching it on or off.</p> <p>The repository context deals with reproducing the visual / organizational element of code with no guarantee of reproducability since the underlying local machines may be different. The container context deals with packaging code for more robust means of reproduction for the live site context.</p>"},{"location":"contexts/container/#post-setup","title":"Post-Setup","text":"<p>By this time, I should already be able to run a web server, employ background tasks, and see how these operate with either postgres or sqlite as the database. These are <code>services</code> that are operating in the local context. Since deployment means to transfer my local context to a remote one, how can I be certain that the conditions in the remote context will be fit to run my desired <code>services</code>?</p> <p>The answer is the use of containers which, in essence, makes an exact remote replica of the local context.</p> <p>Here, I'll implement a local container by moving all relevant files into this single context.</p> <p>Prior to doing so, ensure Docker is installed and running locally.</p>"},{"location":"contexts/container/#local-files","title":"Local files","text":"Project Structure<pre><code>start-django (root)\n\u251c\u2500\u2500 deploy/\n\u251c\u2500\u2500 pg/ # postgres\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 sq/ # sqlite\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 src/ # main project folder, where all the relevant files should be found\n\u251c\u2500\u2500 .dockerignore # (1)\n\u251c\u2500\u2500 scripts/ # common to postgres + sqlite\n\u251c\u2500\u2500 run.sh\n\u251c\u2500\u2500 web.sh\n\u251c\u2500\u2500 worker.sh\n\u251c\u2500\u2500 config/ # the settings folder of the project\n...\n\u251c\u2500\u2500 .env # where variables are declared\n</code></pre> <ol> <li> <p>Should exclude all non-essential files presently found inside <code>/src</code>, this includes:</p> <ol> <li><code>*/.sqlite-*</code></li> <li><code>*/.db*</code></li> <li><code>staticfiles/</code></li> <li><code>mediafiles/</code></li> </ol> </li> </ol> <p>How this document is structured</p> <p>We'll first try to do things manually to see how <code>compose.yml</code> makes this process easier.</p> <p>Where to run commands</p> <p>Based on project structure above, make sure to be in the <code>&lt;root&gt;</code> directory, i.e. where <code>start-django</code> cloned.</p>"},{"location":"contexts/container/#dockerfiles","title":"Dockerfiles","text":"<p>There are two Dockerfiles that are preconfigured under <code>/deploy/pg</code> and <code>/deploy/sq</code>.</p> sqlitepostgres /deploy/sq/Dockerfile<pre><code># syntax=docker/dockerfile:1.2\nFROM python:3.11-slim-bullseye AS builder\n# setup (1)\nRUN apt update \\\n&amp;&amp; apt install -y build-essential wget pkg-config \\\n&amp;&amp; apt clean\n\n# updated version (2)\nARG sqlite_year=2023\nARG sqlite_ver=3410200\nRUN wget https://www.sqlite.org/$sqlite_year/sqlite-autoconf-$sqlite_ver.tar.gz \\\n&amp;&amp; tar xzf sqlite-autoconf-$sqlite_ver.tar.gz &amp;&amp; rm sqlite-autoconf-$sqlite_ver.tar.gz \\\n&amp;&amp; ./sqlite-autoconf-$sqlite_ver/configure --disable-static --enable-fts5 --enable-json1 CFLAGS=\"-g -O2 -DSQLITE_ENABLE_JSON1\" \\\n&amp;&amp; make &amp;&amp; make install\n\n# backup (3)\nARG litestream_ver=0.3.9\nRUN wget https://github.com/benbjohnson/litestream/releases/download/v$litestream_ver/litestream-v$litestream_ver-linux-amd64-static.tar.gz \\\n&amp;&amp; tar xzf litestream-v$litestream_ver-linux-amd64-static.tar.gz &amp;&amp; rm litestream-v$litestream_ver-linux-amd64-static.tar.gz \\\n&amp;&amp; mv litestream /usr/local/bin\n\nFROM python:3.11-slim-bullseye\nCOPY --from=builder /usr/local/lib/ /usr/local/lib/\nCOPY --from=builder /usr/local/bin /usr/local/bin\nENV PYTHONUNBUFFERED=1 \\\nPYTHONDONTWRITEBYTECODE=1 \\\nPIP_DISABLE_PIP_VERSION_CHECK=1 \\\nLD_LIBRARY_PATH=/usr/local/lib\n\n# remote folder (4)\nWORKDIR /opt/src\n# local folder to remote folder (5)\nCOPY /src .\n\n# in remote folder, install (6)\nRUN pip install -r requirements.txt\n\n# make executable (7)\nARG run_cmd\nRUN chmod +x /opt/src/scripts/worker.sh /opt/src/scripts/$run_cmd\n</code></pre> <ol> <li>Prepare packages that will be used to setup <code>litestream</code> and compile <code>sqlite</code> from source</li> <li>See latest sqlite version. Supply the most recent version and relevant extensions to use. At the time of this writing: <code>3.41.2</code> with <code>JSON1</code> + <code>FTS5</code> extensions.</li> <li>See latest litestream release - for use as sqlite backup and recovery. Supply the most recent version. At the time of this writing: <code>0.3.9</code></li> <li> <p>Why <code>opt/</code>? See some context.</p> <p>Why <code>/src</code>? We've placed all relevant files inside this directory, including the <code>requirements.txt</code>.</p> </li> <li> <p>Copies <code>/src</code> the the folder of the  present local build context to the container's <code>WORKDIR</code> which was just set to <code>/opt/src</code></p> </li> <li>Presumes that <code>poetry export -f requirements.txt --without-hashes --output src/requirements.txt</code> has previously been run from the project's root directory</li> <li>Makes the two files executable but is not run. Note that the <code>run_cmd</code> needs to be filled up either during <code>compose.yml</code> or <code>fly.toml</code> since this can either be <code>run.sh</code> or <code>web.sh</code>.</li> </ol> /deploy/pg/Dockerfile<pre><code># syntax=docker/dockerfile:1.2\nFROM python:3.11-slim-bullseye\nENV PYTHONUNBUFFERED=1 \\\nPYTHONDONTWRITEBYTECODE=1 \\\nPIP_DISABLE_PIP_VERSION_CHECK=1\n# psycopg (1)\nRUN apt-get update &amp;&amp; apt-get install -y libpq-dev gcc &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# same\nWORKDIR /opt/src\nCOPY /src .\nRUN pip install -r requirements.txt\n\n# make executable (2)\nRUN chmod +x /opt/src/scripts/worker.sh /opt/src/scripts/${run_cmd}\n</code></pre> <ol> <li>Needed for <code>psycopg</code> to use Postgres</li> <li>Note that the <code>run_cmd</code> needs to be filled up either during <code>compose.yml</code> or <code>fly.toml</code> since this can either be <code>run.sh</code> or <code>web.sh</code>.</li> </ol> <p>Entrypoint/CMD</p> <p>The included Dockerfiles do not contain a <code>CMD</code> / entrypoint script. To run the containers built by the images, I must add a <code>--entrypoint</code> flag or use this in a <code>compose.yml.tpl</code></p> <p>Note however that both Dockerfiles make a variable argument executable alongside <code>worker.sh</code>.</p> <p>I can replace this variable argument with either <code>run.sh</code> or <code>web.sh</code> depending on the context. So I'll use <code>run.sh</code> with the <code>compose.yml.tpl</code> for testing inside the container. Then I can use <code>web.sh</code> as a build argument with <code>fly.toml</code> later during deployment.</p>"},{"location":"contexts/container/#entrypoints","title":"Entrypoints","text":"<p>Dockerfile contain instructions but the ones above do not run anything yet. These will be done by the entrypoint scripts.</p> worker.shrun.sh localweb.sh + fly.toml worker.sh for use in multiple contexts<pre><code>#!/bin/bash\nset -e\npython manage.py migrate\necho \"Run worker.\"\npython manage.py run_huey # (1)\n</code></pre> <ol> <li>The background process worker that will only work if env variables are set.</li> </ol> run.sh for use in local machine via Dockerfile<pre><code>#!/bin/bash\nset -e\npython manage.py collectstatic --noinput # (1)\npython manage.py compress --force # (2)\npython manage.py migrate # (3)\ngunicorn config.wsgi:application \\ # (4)\n--bind 0.0.0.0:8080 \\ # (5)\n--workers=2 \\\n--capture-output \\\n--enable-stdio-inheritance\n</code></pre> <ol> <li>Collect static files into <code>/opt/src/staticfiles</code></li> <li>Compress content from <code>/opt/src/staticfiles</code> into <code>/static/CACHE</code></li> <li>Ensure all migrations affect the database</li> <li>Serve on production gunicorn (https://docs.gunicorn.org/en/latest/run.html) vs. <code>python manage.py runserver</code>; <code>config.wsgi:application</code> refers to the exposed application in Django's <code>/src/config/wsgi.py</code>. See Django and server discussion</li> <li><code>0.0.0.0</code> is included in <code>config.settings.ALLOWED_HOSTS</code>; <code>8080</code> will be exposed port.</li> </ol> web.sh for use in fly.toml deployment as a process<pre><code>#!/bin/bash\nset -e\n# (1)\necho \"Static files management.\"\npython manage.py collectstatic --noinput\npython manage.py compress --force\npython manage.py migrate\n# (2)\necho \"Gunicorn server.\"\ngunicorn config.wsgi:application \\\n--bind 0.0.0.0:\"$PORT\" \\\n--worker-tmp-dir /dev/shm \\\n--workers=2 \\\n--capture-output \\\n--enable-stdio-inheritance\n</code></pre> <ol> <li>Note similar setup with <code>run.sh</code> with the addition of bound port :${PORT} which maps to fly.toml services internal port, see fly.toml's PORT.</li> </ol>"},{"location":"contexts/container/#dockerfile-entrypoint","title":"Dockerfile + Entrypoint","text":"sqlitepostgres sqlite Dockerfile + entrypoint<pre><code>docker build \\\n--tag sq \\\n--file ./deploy/sq/Dockerfile \\\n--build-arg litestream_ver=0.3.9 \\\n--build-arg sqlite_year=2023 \\\n--build-arg sqlite_ver=3410200 \\\n--build-arg run_cmd=run.sh \\\n.\n# why \".\"? (1)\n# exporting to image ...\n# writing image ...\n# naming to docker.io/library/sq\ndocker run --publish 8080:8080 \\\n--env-file .env \\\n--entrypoint scripts/run.sh \\\n--env DATABASE_URL=sqlite:////var/lib/test.sqlite \\\nsq\n# Re: 8080: (2), entrypoint (3)\n# Serve app via gunicorn on 8080 (note connection to sqlite:////var/lib/test.sqlite)\n# [&lt;time&gt;][INFO] Starting gunicorn 20.1.0\n# [&lt;time&gt;][INFO] Listening at: http://0.0.0.0:8080\n</code></pre> <ol> <li>The Dockerfile referenced contains the following instruction <code>COPY /src to .</code>. Since I'm at the root directory in running <code>docker build</code> the local context is <code>.</code> and I'm copying a portion of this local context, i.e. <code>./src</code> to the container.</li> <li>Translates to: build the container, tag it with <code>sq</code>, use the sqlite-based Dockerfile indicated</li> <li>Uses entrypoint script inside container just built and runs the same, exposing port 8080.</li> <li>The entrypoint location is based on contents found inside the docker container. Since the WORKDIR is <code>opt/src</code>, the path to the script is simply <code>scripts/run.sh</code></li> </ol> postgres Dockerfile + entrypoint<pre><code>docker build --tag pg --file ./deploy/pg/Dockerfile .\n# why \".? (1)\n# exporting to image ...\n# writing image ...\n# naming to docker.io/library/sqlite-django-docker\ndocker run --publish 8080:8080 --env-file .env --entrypoint scripts/run.sh \\\n--env DATABASE_URL=postgres://db_usr:pw@host.docker.internal:5432/db_pg \\\npg\n# Re: DATABASE_URL: (2)\n# Serve app via gunicorn on 8080 (note connection to postgres://db_usr:pw@host.docker.internal:5432/db_pg)\n# [&lt;time&gt;][INFO] Starting gunicorn 20.1.0\n# [&lt;time&gt;][INFO] Listening at: http://0.0.0.0:8080\n</code></pre> <ol> <li>The Dockerfile referenced contains the following instruction <code>COPY /src to .</code>. Since I'm at the root directory in running <code>docker build</code> the local context is <code>.</code> and I'm copying a portion of this local context, i.e. <code>./src</code> to the container.</li> <li>Note that the database credentials employed are those created during local development. This instance of postgres sits in the dev machine and not in a separate docker container. To reach the dev machine from the Docker container, need to use <code>host.docker.internal</code> for the host.</li> </ol>"},{"location":"contexts/container/#docker-compose","title":"Docker Compose","text":"<p>The above configurations for each pairing of Dockerfile + database to use can become unwieldly.</p> <p>Note that though I've gotten a container running for the Django web service, I still haven't implemented <code>redis</code>, <code>huey</code>, and <code>postgres</code> as separate containers. Re: <code>postgres</code>, I've used the local version of it on my device but I haven't created a separate container for it.</p> <p>This is where the <code>compose.yml</code> becomes handy. I'm able to attach profiles, in this case <code>pg</code> and <code>sq</code> so that I can simply run:</p> sqlitepostgres compose.debug.yml<pre><code>docker-compose -f compose.debug.yml --profile sq up --build\n# will use sqlite Dockerfile image to build container then run it\n</code></pre> compose.profidebugled.yml<pre><code>docker-compose -f compose.debug.yml  --profile pg up --build\n# will use postgres Dockerfile image to build container then run it\n</code></pre> <p>And this will orchestrate multiple running services: <code>django</code>, <code>redis</code>, <code>huey</code>, and the database, whether <code>sqlite</code> or <code>postgres</code>, taking into account the \"depends_on\" field of each service</p> <p>See the full <code>compose.debug.yml</code> which can also be invoked via a just command shortcut: <code>just debug_up</code> (assumes 1Password secret reference usage.)</p>"},{"location":"contexts/container/#command-runner","title":"Command Runner","text":"<p>Requires: <code>1password</code>-based secret references</p>"},{"location":"contexts/container/#container-debug","title":"Container Debug","text":"<p><code>just debug_up &lt;target&gt;</code></p> Use debugpy on the runserver, must 'Remote Attach' the VS Code debugger separately<pre><code>poetry export -f requirements.txt \\\n--without-hashes \\\n--output src/requirements.txt # (1)\nop inject -i ./deploy/env.common.tpl -o ./deploy/.env.debug # (2)\ncp ./deploy/compose.debug.yml compose.yml # (3)\ndocker-compose --file compose.debug.yml \\\n--profile {{target}} up \\\n--build # (4)\n</code></pre> <ol> <li> <p>The Dockerfile referenced in the compose.yml will pip install a <code>/src/requirements.txt</code> so <code>poetry export</code> ensures that what is installed is always what's declared in <code>pyproject.toml</code></p> </li> <li> <p>Since secrets stored in the .env file are 1Password secret references, I need to inject them into a .env-template; ensure that the <code>compose.debug.yml</code> makes use of this same .env-template.</p> <p>The .env-file will contain secrets. Hence it's critical it be prefixed <code>.env</code> so that this same file will always be included by <code>.gitignore</code>.</p> </li> <li> <p>The <code>compose.yml</code> file needs to be in the root directory since the build context is <code>.</code> and the Dockerfile copies from <code>/src</code>.</p> </li> <li> <p>The <code>&lt;target&gt;</code> argument refers to a profile declared in a <code>compose.yml</code> file</p> </li> </ol>"},{"location":"contexts/container/#specific-compose-up","title":"Specific Compose Up","text":"<p><code>just up &lt;folder&gt;</code></p> Inject secrets in .env file declared in a folder's compose.yml then use it as root compose<pre><code>poetry export -f requirements.txt \\\n--without-hashes \\\n--output src/requirements.txt # (1)\nop inject -i ./deploy/{{folder}}/env.tpl -o ./deploy/{{folder}}/.env # (2)\ncp ./deploy/{{folder}}/compose.yml compose.yml # (3)\ndocker-compose up --build\n</code></pre> <ol> <li> <p>The Dockerfile referenced in the compose.yml will pip install a <code>/src/requirements.txt</code> so <code>poetry export</code> ensures that what is installed is always what's declared in <code>pyproject.toml</code></p> </li> <li> <p>Since secrets stored in the .env file are 1Password secret references, I need to inject them into a .env-template; ensure that the <code>{{folder}}/compose.yml</code> makes use of this same <code>{{folder}}/env.tpl</code></p> <p>The .env-file will contain secrets. Hence it's critical it be named <code>.env</code> so that this same file will always be included by <code>.gitignore</code>.</p> </li> <li> <p>The <code>compose.yml</code> file needs to be in the root directory since the build context is <code>.</code> and the Dockerfile copies from <code>/src</code>.</p> </li> </ol>"},{"location":"contexts/ide/","title":"IDE","text":""},{"location":"contexts/ide/#using-not-using-type-systems","title":"Using / not using type systems","text":"<p>I like typing for the simple reason that it enables me to easily look at the source code from the IDE . Consider the following check:</p> Import of HttpRequest / TemplateResponse, even if unnecessary.<pre><code>from django.http.request import HttpRequest\nfrom django.template.response import TemplateResponse\ndef public_profile(req: HttpRequest, username: str) -&gt; TemplateResponse:\nreturn TemplateResponse(\nreq,\n\"profiles/detail.html\",\n{\"profile\": get_object_or_404(Profile, user__username=username)},\n)\n</code></pre> <p>I can quickly use the IDE to quickly \"go to the definition\" of <code>HttpRequest</code> or <code>TemplateResponse</code>.</p> <p>Perfectionists with deadlines indeed.</p> <p>On a non-technical note, red squigglies often evoke the same passion of a bull seeing a red cape so using types alleviates this maddening feeling to a certain extent. And then there's the inane amount of <code>noqa:</code> littering that is a pet peeve I need to fix.</p>"},{"location":"contexts/ide/#formatting-code-on-save","title":"Formatting code on save","text":"<code>.vscode/settings.json</code><code>pyproject.toml</code> JSON<pre><code>\"[python]\": {\n\"editor.formatOnSave\": true,\n\"editor.defaultFormatter\": \"ms-python.black-formatter\", // black; see also vscode extension\n\"editor.codeActionsOnSave\": {\n\"source.fixAll\": true,\n\"source.organizeImports.ruff\": true // ruff; see also vscode extension\n},\n},\n</code></pre> TOML<pre><code>[tool.ruff]\nignore = [\"F401\", \"F403\"]\nfixable = [\"F\", \"E\", \"W\", \"I001\"]\nselect = [\"F\", \"E\", \"W\", \"I001\"]\n[tool.ruff.per-file-ignores]\n\"src/config/settings/__init__.py\" = [\"F405\", \"E501\"]\n\"src/config/settings/_auth.py\" = [\"F405\", \"E501\"]\n\"src/config/settings/_settings.py\" = [\"E501\"]\n</code></pre>"},{"location":"contexts/ide/#useful-extensions","title":"Useful extensions","text":"<p>Excluding the non-standard ones:</p> <ol> <li>SQLite</li> <li>Postgres</li> <li>Python Indent</li> <li>python-string-sql</li> <li>Tailwind Intellisense</li> </ol>"},{"location":"contexts/ide/#test-runner","title":"Test Runner","text":"<p>Take advtange of tests already declared in the local context:</p> <p><code>.vscode/settings.json</code> x pytest</p> JSON<pre><code>\"python.testing.pytestArgs\": [\n\"${workspaceFolder}/src\", // without this, pytest discovery error\n\"--ds=config.settings\", // see pytest django\n\"--doctest-modules\",\n\"--exitfirst\",\n\"--verbose\"\n],\n</code></pre>"},{"location":"contexts/ide/#configure-debugger","title":"Configure Debugger","text":"localcontainer <p>No need to setup, just click the Run and Debug button.</p> .vscode/launch.json<pre><code>    {\n\"name\": \"Python: Django Local\",\n\"type\": \"python\",\n\"request\": \"launch\",\n\"program\": \"${workspaceFolder}/src/manage.py\",\n\"args\": [\n\"runserver\",\n\"--noreload\",\n\"--nothreading\",\n],\n\"django\": true,\n\"cwd\": \"${workspaceFolder}/src\",\n},\n</code></pre> <p>1Password CLI</p> <p>If using secret references in the <code>.env</code> file, i.e. op://, must be based on <code>auth-local</code></p> <p>Assuming a <code>compose.yml</code> is executed with <code>debugpy</code> setup, the <code>docker-compose</code> should pause after all services have been started. VS Code's Run and Debug button can be clicked with the following configuration for the debugger to work.</p> .vscode/launch.json applied to compose.yml<pre><code>  {\n\"name\": \"Python: Remote Attach\",\n\"type\": \"python\",\n\"request\": \"attach\",\n\"port\": 5678,\n\"host\": \"localhost\",\n\"pathMappings\": [\n{\n\"localRoot\": \"${workspaceFolder}/src\",\n\"remoteRoot\": \".\"\n}\n]\n},\n</code></pre> <p>1Password CLI</p> <p>If using secret references in the <code>.env</code> file, i.e. op://, must be based on <code>auth-container</code></p> debuggable compose env shortcut purpose note yes compose.debug.yml (copied to root) Template <code>env.common.tpl</code> to populate <code>.env.debug</code> for compose.yml <code>just debug_up</code> attach vscode debugger uses runserver, lacks ability to debug the background process, might need separate no sq/compose.yml (copied to root) Template <code>/deploy/sq/env.tpl</code> to populate <code>/deploy/sq/.env</code> for compose.yml <code>just up sq</code> check parity on prod uses gunicorn with an sqlite volume no pg/compose.yml  (copied to root) Template <code>/deploy/pg/env.tpl</code> to populate <code>/deploy/pg/.env</code> for compose.yml <code>just up pg</code> check parity on prod uses gunicorn, separate postgres container"},{"location":"contexts/local/","title":"Local","text":""},{"location":"contexts/local/#getting-it-to-run-and-look-nice","title":"Getting it to run and look nice","text":"<ol> <li>Configure initial settings to run on local machine</li> <li>Integrate local database, see example with postgres</li> <li>Running Tailwind build step when adjusting UI</li> <li>Using social auth callback urls with <code>127.0.0.1</code> as the host</li> </ol>"},{"location":"contexts/local/#setting-up-tests","title":"Setting up tests","text":""},{"location":"contexts/local/#creation","title":"Creation","text":"<ol> <li>I'll often do docstring tests to quickly unit test a function so I can grok it immediately.</li> <li>If this requires a formal <code>*.test</code> file, I'll populate the <code>/src/tests</code> folder</li> </ol>"},{"location":"contexts/local/#running","title":"Running","text":"<p>Instead of having to write the full options list, can simply run <code>pytest</code> on the shell and it will adopt the configuration declared in pyproject.toml :</p> <p>pyproject.toml x pytest</p> pyproject.toml<pre><code>    [tool.pytest.ini_options]\nminversion = \"7.0\"\npythonpath = \"src\" # (1)\naddopts = \"-ra -q --ds=config.settings --doctest-modules --cov\" # (2)\nfilterwarnings = [\n\"ignore::DeprecationWarning\", # (3)\n\"ignore::django.utils.deprecation.RemovedInDjango51Warning\" # (4)\n]\ntestpaths = [\"tests\"]\n</code></pre> <ol> <li> is at <code>src</code> so it's as if pytest is running under this context</li> <li>Note <code>--ds=config.settings</code> refers to the use of pytest-django</li> <li>Ignore the noise- DeprecationWarning: pkg_resources is deprecated as an API</li> <li>Ignore the noise-  GET_STORAGE_CLASS_DEPRECATED_MSG</li> </ol>"},{"location":"contexts/local/#configuring-shortcuts","title":"Configuring shortcuts","text":""},{"location":"contexts/local/#just-start","title":"<code>just start</code>","text":"<p>Requires: <code>npm</code>, <code>poetry</code>, <code>just</code></p> Bash<pre><code># (1) setup\ncp ./etc/env.example.0.dev-op .env\npoetry install\npoetry shell\nnpm install -D tailwindcss \\\n@tailwindcss/typography \\\n@tailwindcss/forms \\\n@tailwindcss/aspect-ratio \\\n@tailwindcss/container-queries\nnpx tailwindcss -i ./src/static/css/input.css -o ./src/static/css/output.css\n\n# (2) just req\npoetry export -f requirements.txt \\\n--without-hashes \\\n--output src/requirements.txt\n\n# (3) just press\nrm -rf ./src/static/CACHE\ncd src &amp;&amp; python manage.py collectstatic --noinput\ncd src &amp;&amp; python manage.py compress --force\n\n# (4) just db\ncd src &amp;&amp; python manage.py makemigrations\ncd src &amp;&amp; python manage.py migrate\n\n# (5) test then run\npre-commit autoupdate\ncd src &amp;&amp; pytest\ncd src &amp;&amp; python manage.py runserver_plus\n</code></pre> <ol> <li>Setup .venv, create an .env file model and place it in the root</li> <li>Adds a <code>requirements.txt</code> inside <code>/src</code> based on <code>pyproject.toml</code> dependencies.</li> <li>Runs collection and compression of staticfiles.</li> <li>Populates database for use based on existing models declared in <code>/pages</code> and <code>/profiles</code></li> <li>Prep dev environment, sanity check on default boilerplate</li> </ol>"},{"location":"contexts/local/#just-tw","title":"<code>just tw</code>","text":"<p><code>npx tailwindcss -i ./src/static/css/input.css -o ./src/static/css/output.css --watch</code></p>"},{"location":"contexts/local/#just-dumpenv","title":"<code>just dumpenv</code>","text":"<p>Requires: <code>1password</code></p> <p><code>op inject -i ./etc/env.example.0.dev-op -o .env</code></p>"},{"location":"contexts/local/#just-run","title":"<code>just run</code>","text":"<p><code>open -a \"Brave Browser.app\" http://127.0.0.1:8000/ &amp;&amp; cd src &amp;&amp; python manage.py runserver_plus</code></p>"},{"location":"contexts/local/#just-work","title":"<code>just work</code>","text":"<p><code>cd src &amp;&amp; python manage.py run_huey</code></p>"},{"location":"contexts/local/#documentation","title":"Documentation","text":"<p>Explaining functions created in the documentation</p>"},{"location":"contexts/overview/","title":"Overview","text":"<p>I find myself learning various coding subcultures. I don't have a proper word for it so I'll just make one up for now. Consider the following project structure where  technically should occupy a single <code>/src</code> folder.</p> github workflow, justfile, docs, env examples, container files<pre><code>&lt;root&gt;\n\u251c\u2500\u2500 .github/workflows/main.yml # ci\n\u251c\u2500\u2500 .vscode/ # configures mkdocs, ruff, pytest, etc., file associations\n\u251c\u2500\u2500 .venv/ # local virtual environment\n\u251c\u2500\u2500 deploy/ # dockerfiles, fly.toml, env.fly.tpl\n\u251c\u2500\u2500 sq/ # config: sqlite\n\u251c\u2500\u2500 pg/ # config: postgres\n\u251c\u2500\u2500 docs/ # material for mkdocs\n\u251c\u2500\u2500 etc/ # example env variables\n\u251c\u2500\u2500 src/ # this is django, everything else has its place\n\u251c\u2500\u2500 justfile # shortcut recipes like 'just start'\n\u251c\u2500\u2500 pyproject.toml # poetry-driven\n\u251c\u2500\u2500 tailwind.config.js # sets up locations to watch, theme variables\n\u251c\u2500\u2500 .env\n</code></pre> Context Focus local <code>.venv</code>, <code>/src</code> + <code>tailwind.config.js</code> ide <code>.vscode/</code> repl tooling from <code>python manage.py shell_plus</code>, Jupyter extension, etc. repo see <code>.github/workflows/main.yml</code> container see <code>/deploy</code> site see <code>/deploy</code>"},{"location":"contexts/repl/","title":"REPL","text":""},{"location":"contexts/repl/#shell","title":"shell","text":"<p>Traditionally, one would use the terminal to enter the shell:</p> Bash<pre><code>python manage.py shell\n# Python 3.11.3 (main) [Clang 14.0.3 (clang-1403.0.22.14.1)]\n# Type 'copyright', 'credits' or 'license' for more information\n# IPython 8.13.2 -- An enhanced Interactive Python. Type '?' for help.\n#\nIn [1]:\n</code></pre>"},{"location":"contexts/repl/#shell_plus","title":"shell_plus","text":"<p>Since I'd like to load Django models, django-extensions shell_plus does this automatically:</p> Bash<pre><code>python manage.py shell_plus\n# # Shell Plus Model Imports\n# from allauth.account.models import EmailAddress, EmailConfirmation\n# from allauth.socialaccount.models import SocialAccount, SocialApp, SocialToken\n# from django.contrib.admin.models import LogEntry\n# from django.contrib.auth.models import Group, Permission\n# from django.contrib.contenttypes.models import ContentType\n# from django.contrib.sessions.models import Session\n# from django.contrib.sites.models import Site\n# from pages.models import Agreement, UserConsent\n# from profiles.models import Profile, User\n# # Shell Plus Django Imports\n# from django.core.cache import cache\n# from django.conf import settings\n# from django.contrib.auth import get_user_model\n# from django.db import transaction\n# from django.db.models import Avg, Case, Count, F, Max, Min, Prefetch, Q, Sum, When\n# from django.utils import timezone\n# from django.urls import reverse\n# from django.db.models import Exists, OuterRef, Subquery\n# Python 3.11.3 (main) [Clang 14.0.3 (clang-1403.0.22.14.1)]\n# Type 'copyright', 'credits' or 'license' for more information\n# IPython 8.13.2 -- An enhanced Interactive Python. Type '?' for help.\nIn [1]:\n</code></pre>"},{"location":"contexts/repl/#ide","title":"IDE","text":"<p>Nowadays I like using vscode's Jupyter extension to enter this context. But this requires the running of an initial script:</p> Without initialization, running code in jupyter results in error<pre><code>&gt;&gt;&gt; from django.conf import settings\n&gt;&gt;&gt; settings\n...\nImproperlyConfigured: Requested settings, but settings are not configured.\nYou must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\n</code></pre> <p>Let's fix that error message by running this script prior to Django-related cells:</p> Run this cell first<pre><code>import os\nimport sys\nimport django\nfrom dotenv import load_dotenv\nfrom pathlib import Path\nBASE_DIR = Path().cwd() # 1\nsys.path.insert(0, BASE_DIR)\nload_dotenv(\".env\", override=True)\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings\") # (2)\nos.environ[\"DJANGO_ALLOW_ASYNC_UNSAFE\"] = \"true\" # (3)\ndjango.setup() # (4)\n</code></pre> <ol> <li>Note this might need to change depending on location: BASE_DIR = Path(file).parent.parent</li> <li>Access django imports</li> <li>Allow qs async filtering in a cell</li> <li>This is for setting up django</li> </ol> <p>This script adds the project base directory to the <code>sys.path</code>, enabling detection of module imports. Assumes local <code>.env</code> exists in a project called <code>config</code>.</p> <p>In subsequent cells, can access various Django objects:</p> Can now run this in the subsequent cell<pre><code>&gt;&gt;&gt; from django.conf import settings\n&gt;&gt;&gt; settings\n&lt;LazySettings \"config.settings\"&gt;\n&gt;&gt;&gt; settings.ROOT_URLCONF\n'config.urls'\n</code></pre>"},{"location":"contexts/repo/","title":"Repo","text":"<p>The local context gets pushed to a repository online which has its own nuanced set of rules:</p> <ol> <li>Setting up github workflow action</li> <li>Determining matrix of tests</li> <li>Adding relevant secrets</li> <li>Ensure local machine tests replicated on repo</li> </ol>"},{"location":"contexts/repo/#lint","title":"Lint","text":"Lint<pre><code>runs-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v3\n- name: Setup Python\nuses: actions/setup-python@v4\nwith:\npython-version: \"3.11\"\n- name: Install Dependencies\nrun: |\npip install pre-commit\npre-commit install-hooks\n- name: Lint with pre-commit\nrun: pre-commit run --all-files\n</code></pre>"},{"location":"contexts/repo/#test","title":"Test","text":".github/workflows/main.yml<pre><code>services:\npostgres:\nimage: postgres:15\nenv:\nPOSTGRES_USER: postgres\nPOSTGRES_PASSWORD: postgres\nPOSTGRES_DB: postgres\nports: ['5432:5432']\noptions: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n...\nname: Testing Python ${{ matrix.python-version }}\nsteps:\n- name: Pytest via Sqlite Database Engine\nrun: poetry run pytest --ds=config.settings\nworking-directory: ./src\n- name: Pytest via Postgres Database Engine\nenv:\nDATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'\nrun: poetry run pytest\nworking-directory: ./src\n</code></pre>"},{"location":"contexts/site/","title":"Site","text":"<ol> <li>Public deployment<ol> <li>Signing up for a cloud service, see Will Vincent's summary of options</li> <li>Rolling out your own server.</li> </ol> </li> <li>Integrating a remote database<ol> <li>Syncing the remote database with a local version, or a partial segment of it</li> <li>Ensuring the backup mechanism works</li> <li>Checking the backup mechanism regularly</li> </ol> </li> <li>Reviewing user interactions which ought to be guarded<ol> <li>Cache mechanisms</li> <li>Rate limiting</li> <li>User spam</li> <li>File uploads</li> </ol> </li> <li>Being more deliberate with secrets, e.g.<ol> <li>Managing their existence</li> <li>Limiting hosts</li> </ol> </li> <li>Establishing remote logs</li> <li>Focusing more on devops than the actual app created with </li> </ol>"},{"location":"contexts/site/#command-runner","title":"Command Runner","text":"<p>Requires: <code>fly.toml</code> pre-configured, <code>1password</code>-based secret references</p>"},{"location":"contexts/site/#deploy-app-database-with-staged-decrets","title":"Deploy app + database with staged decrets","text":"<code>just fly &lt;deployable&gt; &lt;config&gt;</code> Inject a specific compose.yml with secrets<pre><code># just set_secrets\nop inject -i ./deploy/env.fly.tpl -o ./deploy/.env.fly\nfly secrets --app {{deployable}} import &lt; ./deploy/.env.fly --stage\nrm ./deploy/.env.fly\n\n# just deploy\npoetry export -f requirements.txt \\\n--without-hashes \\\n--output src/requirements.txt\n\nfly deploy \\\n--app {{deployable}} \\\n--config ./deploy/{{config}}/fly.toml \\\n--dockerfile ./deploy/{{config}}/Dockerfile\n</code></pre>"},{"location":"contexts/site/#stage-secrets-pre-deploy","title":"Stage secrets pre-deploy","text":"<code>just set_secrets &lt;deployable&gt;</code> Inject a specific compose.yml with secrets<pre><code>op inject -i ./deploy/env.fly.tpl -o ./deploy/.env.fly\nfly secrets --app {{deployable}} import &lt; ./deploy/.env.fly --stage\nrm ./deploy/.env.fly\n</code></pre>"},{"location":"contexts/site/#deploy-app-with-db","title":"Deploy app with db","text":"<p><code>just deploy &lt;deployable&gt; &lt;config&gt;</code></p> Text Only<pre><code>```sh title=\"Inject a specific compose.yml with secrets\"\npoetry export -f requirements.txt \\\n  --without-hashes \\\n  --output src/requirements.txt\n\nfly deploy \\\n  --app {{deployable}} \\\n  --config ./deploy/{{config}}/fly.toml \\\n  --dockerfile ./deploy/{{config}}/Dockerfile\n```\n</code></pre>"},{"location":"deploy/config/","title":"Post-Deployment Configuration","text":""},{"location":"deploy/config/#domain-name-target-appcom","title":"Domain Name: <code>target-app.com</code>","text":"<p>Since the <code>fly.toml</code> field <code>app</code> is <code>deployed-xxx</code>, the following URL will be usable: <code>deployed-xxx.fly.dev</code> and it will have the following IP addresses:</p> Bash<pre><code>fly ips list\n# VERSION IP                      TYPE            REGION  CREATED AT\n# v6      xxxx:xxxx:x::xxx        public          global  1m ago\n# v4      yy.yyy.yyy.yyy          public (shared)\n# see https://fly.io/docs/flyctl/ips/\n</code></pre> <p>Assuming I already have a domain that I'd like to attach, how do I make the adjustment?</p> <p>I connect the <code>AAAA</code> value for <code>deployed-xxx.fly.dev</code> with the target domain's DNS settings (e.g. namecheap, cloudflare, google domains, etc.)</p> <p>After this is done, I can add the target like so:</p> <pre><code>fly certs add target-app.com\n# see https://fly.io/docs/flyctl/certs/\n</code></pre> <p>Finally, I can add the final url/s to <code>DJANGO_ALLOWED_HOSTS</code> to fly secrets:</p> Allow domain as host<pre><code>fly secrets set DJANGO_ALLOWED_HOSTS=\"deployed-xxx.fly.dev,target-app.com\"\n</code></pre>"},{"location":"deploy/config/#add-superuser","title":"Add Superuser","text":"<p>Access the admin console at <code>target-app.com/admin</code> by creating a superuser</p> Terminal Console<pre><code>fly ssh console # (1)\n# Connecting to zzz-gibberish-xxx... complete\npython opt/src/manage.py createsuperuser # (2)\n# Username: xxx\n# Email address: yyy@somethingmail.com\n# Password: zzz\n# Password (again): zzz\n# Superuser created successfully.\n</code></pre>"},{"location":"deploy/config/#revise-default-examplecom","title":"Revise default <code>example.com</code>","text":""},{"location":"deploy/config/#transactional-email-from-examplecom","title":"Transactional Email From <code>example.com</code>","text":"<p>If we try to signup to test the <code>POSTMARK_API_KEY</code>, we'll get a sample email:</p> <p>Sample Email Received</p> <p>Hello from example.com!</p> <p>You're receiving this e-mail because user xxx has given your e-mail address to register an account on example.com.</p> <p>To confirm this is correct, go to http://deployed-xxx.fly.dev/accounts/confirm-email/MQ:random-text/</p> <p>Thank you for using example.com! example.com</p>"},{"location":"deploy/config/#transactional-email-from-target-appcom","title":"Transactional Email from <code>target-app.com</code>","text":"<p>We can change the default <code>example.com</code> by logging into the admin dashboard with the <code>superuser</code> and change <code>example.com</code> to <code>target-app.com</code>.</p>"},{"location":"deploy/deploy/","title":"Deployment Proper","text":""},{"location":"deploy/deploy/#app-database","title":"App + database","text":"postgressqlite Attach separate postgres app to fly app<pre><code>fly apps create app_name --machines # ensure app name matches fly.toml (1)\nfly pg create --name pg-xxx-db --region sin  # complete wizard (2)\nfly pg attach pg-xxx-db --app app_name # save DATABASE_URL; how to detach/destroy (3)\n</code></pre> <ol> <li> <p>See the fly toml template:</p> /pg/fly.toml - same app name<pre><code>app = \"app_name\" #\nprimary_region = \"sin\"\n[env]\nDJANGO_ALLOWED_HOSTS = \"app_name.fly.dev\"  # make sure set here or in fly secrets\n</code></pre> <p>See reference</p> </li> <li> <p>See the fly toml template:</p> /pg/fly.toml - same region<pre><code>app = \"app_name\" #\nprimary_region = \"sin\"\n...\n</code></pre> </li> <li> <p>When required to delete</p> When needed<pre><code>fly pg detach --app start-django pg-xxx-db\nfly apps destroy pg-xxx-db # confirm destruction\n</code></pre> </li> </ol> Create virtual machines in fly with 2 volumes<pre><code>fly apps create xxx --machines # Check fly apps list (1)\nfly vol create &lt;db_vol&gt; --region sin --size 1 -a xxx  # (2)\nfly vol create &lt;db_vol&gt; --region sin --size 1 -a xxx  # (3)\nfly vol list -a xxx # shows 2 items\n</code></pre> <ol> <li> <p>See the fly toml template:</p> /sq/fly.toml - same app name<pre><code>app = \"app_name\" #\nprimary_region = \"sin\"\n[env]\nDJANGO_ALLOWED_HOSTS = \"app_name.fly.dev\"  # make sure set here or in fly secrets\n</code></pre> <p>See reference</p> </li> <li> <p>Will receive a prompt prior to creation: Warning! Individual volumes are pinned to individual hosts. You should create two or more volumes per application. You will have downtime if you only create one. Learn more at https://fly.io/docs/reference/volumes/; name only allows alphanumeric characters and underscores. See where to put in the fly.toml template:</p> /sq/fly.toml - same app name<pre><code>app = \"app_name\" #\nprimary_region = \"sin\"\n...\n[mounts]\nsource = \"&lt;db-vol&gt;\"\ndestination = \"/opt/src/data\" # path within container\n</code></pre> <p>See reference</p> </li> <li> <p>The fly.toml uses 2 processes, if only one volume is created, this will error out: Error: not enough volumes named start_django_volume (1) to run 2 processes</p> </li> </ol> <p>Background workers do not work yet</p> <p>Despite functioning in the local Docker container context, the same doesn't work in fly. The worker.sh process (which utilizes huey, see fly.toml) can't seem to update an image (e.g. when creating a new account) as a background task. I suspect it's because of the volume. In docker-compose, the volume is shared. In fly.io:</p> <p>Volumes are independent of one another; Fly.io does not automatically replicate data among the volumes on an app, so if you need the volumes to sync up, your app has to make that happen.</p> <p>Looks like I'll have to wait for LiteFS or find time to learn an existing early implementation, see example in usher.dev.</p>"},{"location":"deploy/deploy/#secrets-deploy","title":"Secrets + deploy","text":"postgressqlite  unpack just fly Be in <pre><code>fly -a app_name secrets import &lt; .env.fly --stage # (1)\nfly -a app_name secrets list # (2)\nfly deploy -a app_name deploy \\\n--config ./deploy/pg/fly.toml \\\n--dockerfile ./deploy/pg/Dockerfile # (3)\n</code></pre> <ol> <li>Add <code>DJANGO_SECRET_KEY=whatever</code>, <code>REDIS_URL=&lt;REDIS_FLY_URL&gt;</code>, and all third-party service secrets (e.g. <code>POSTMARK_API_KEY=your-key</code>, etc.) to <code>.env.fly</code> then proceed to deploy. The <code>--stage</code> will result in \"Secrets have been staged, but not set on VMs. Deploy or update machines in this app for the secrets to take effect.\"</li> <li>Review presence of secrets</li> <li>This should take a few minutes</li> </ol> Requires /deploy/.env.fly<pre><code>just fly app_name pg # will use pg config folder to deploy app_name\n</code></pre>  unpack just fly Be in <pre><code>fly -a xxx secrets import &lt; ./deploy/.env.fly --stage # (1)\nfly -a xxx secrets list # (2)\nfly deploy -a xxx deploy \\\n--config ./deploy/sq/fly.toml \\\n--dockerfile ./deploy/sq/Dockerfile # (3)\n</code></pre> <ol> <li>Add <code>DJANGO_SECRET_KEY=whatever</code>, <code>REDIS_URL=&lt;REDIS_FLY_URL&gt;</code>, and all third-party service secrets (e.g. <code>POSTMARK_API_KEY=your-key</code>, etc.) to <code>.env.fly</code> then proceed to deploy. The <code>--stage</code> will result in \"Secrets have been staged, but not set on VMs. Deploy or update machines in this app for the secrets to take effect.\"</li> <li>Review presence of secrets</li> <li>This should take a few minutes</li> </ol> Requires /deploy/.env.fly<pre><code>just fly xxx sq # will use sq config folder to deploy xxx\n</code></pre>"},{"location":"deploy/do/","title":"Digital Ocean","text":""},{"location":"deploy/do/#preflight","title":"Preflight","text":"<p>Stale</p> <ol> <li>Worked on Digital Ocean's App Platform</li> <li>Need <code>runtime.txt</code></li> <li>Push updated project to the github repository</li> <li>Haven't updated this in awhile</li> </ol>"},{"location":"deploy/do/#create-do-app","title":"Create DO App","text":"<p>Create app with Step 1 / Choose Source: connect github repository.</p>"},{"location":"deploy/do/#add-database","title":"Add Database","text":"<p>Scroll to the bottom of the wizard form of Step 2 / Configure your app , start with adding a database named <code>db</code>. This is a Django project after all.</p> <p>Name the database <code>db</code>.</p>"},{"location":"deploy/do/#set-wsgi","title":"Set WSGI","text":"<p>Append config.wsgi to the default contained in <code>Run Command</code> field of Step 2 / Configure your app:</p>"},{"location":"deploy/do/#set-env","title":"Set Env","text":"<p>In Step 2 / Configure your app, the field for environment variables is empty. Set the following:</p> Key Value Description <code>DJANGO_ALLOWED_HOSTS</code> ${APP_DOMAIN} This can be configured later hence the brackets <code>DATABASE_URL</code> ${db.DATABASE_URL} This assume that the DATABASE is named <code>db</code> <code>DJANGO_SECRET_KEY</code> Set your own Preconfigure and toggle the \"encrypt\" checkbox on <code>ENV_NAME</code> test Preconfigure and toggle the \"encrypt\" checkbox on <p>Additionally, can add optional environment variables for social authentication IDs.</p>"},{"location":"deploy/do/#add-details","title":"Add Details","text":"<p>On <code>Next</code>, Step 3 / Name your web service:</p> <ol> <li>Select a name</li> <li>Add a data region</li> </ol>"},{"location":"deploy/do/#build-app","title":"Build App","text":"<p>On <code>Next</code>, Step 4 / Finalize and launch, select:</p> <ol> <li>The pricing plan</li> <li>Number of containers</li> </ol> <p>Then <code>Launch App</code> which will proceed to build the component.</p> <p>Note that as part of auto-detecting python's <code>requirement.txt</code> file and determining that it is a python / django application, the build process automatically runs the following command after \"Installing requirements with pip\":</p> Bash<pre><code>&gt; python manage.py collectstatic --noinput\n</code></pre> <p>This standard command places all static files - such as images, css, and js - in a single designated output directory previously set by <code>config.settings.STATIC_ROOT</code>.</p> <p>The build process normally takes a few minutes.</p>"},{"location":"deploy/do/#initialize-database-admin","title":"Initialize Database / Admin","text":"<p>Can now run commands in the console such as:</p> Bash<pre><code>&gt; python manage.py migrate # creating the database tables based on Django migration files\n</code></pre> Bash<pre><code>&gt; python manage.py createsuperuser # creating the admin user that can access /admin console\n</code></pre>"},{"location":"deploy/do/#setup-domain","title":"Setup Domain","text":"<ol> <li>Let's assume previous purchase / control of a <code>samplesite.com</code> from NameCheap</li> <li>Visit the <code>Settings</code> tab of the console</li> <li>Click on <code>Edit</code> in the <code>Domains</code> section</li> <li>Click on <code>Add Domain</code></li> <li>Enter the domain in the field</li> <li>Choose <code>We manage your domain</code></li> <li>Secure Digital Ocean <code>nameservers</code> e.g.:</li> <li>ns1.digitalocean.com</li> <li>ns2.digitalocean.com</li> <li>ns3.digitalocean.com</li> <li>Visit NameCheap's console related to the purchased <code>samplesite.com</code></li> <li>Add the nameservers</li> <li>DNS name changes can take up to 72 hours.</li> </ol>"},{"location":"deploy/do/#visit-django-admin","title":"Visit Django Admin","text":"<ol> <li>Use created <code>superuser</code> account to login to <code>samplesite.com/admin</code></li> <li>Change the domain name from <code>example.com</code> to <code>samplesite.com</code></li> </ol>"},{"location":"deploy/prep/","title":"Preflight","text":"<p>Caveat</p> <p>There is a common checklist of things to do with this boilerplate prior to fly.io deployment with either sqlite or postgres.</p> <p>More generally, we'll presume all tests are passing, all your secrets are prepared, containerization works as expected, and your local machine has all of fly's necessary tooling.</p> <p>Finally, note that while Fly has a generous free tier it requires a credit card to signup.</p>"},{"location":"deploy/prep/#working-container","title":"Working container","text":"<p>If the <code>compose.yml.tpl</code> (in <code>/pg</code> and <code>/sq</code>) has been tested to work on the different services, e.g. background tasks, image upload, email sending, etc., then it implies that all secrets have been prepared.</p>"},{"location":"deploy/prep/#secrets-preparation","title":"Secrets preparation","text":"<p>Some secrets are sensitive and need to be guarded more securely than others, other secrets are more in the nature of general toggles and can be hard-coded into a config file such as the <code>compose.yml</code> or the <code>fly.toml</code>.</p> sensitive .env.flytoggle fly.toml / compose.yml Key Note DJANGO_SECRET_KEY must have one handy; Django-specific; keep safe per project REDIS_URL must have one handy; can be a common url, used in other remote projects DATABASE_URL if using sqlite, need to create a volume and manually set; if postgres, this is generally provided by the service POSTMARK_API_KEY needed for auth / email sending; third-party service GOOGLE_ID &amp; GOOGLE_KEY needed for social auth; third-party service; GITHUB_ID &amp; GITHUB_KEY needed for social auth; third-party service; CF_IMG_TOKEN &amp; CF_ACCT_ID &amp; CF_IMG_HASH needed for ImageField, media (image) storage; third-party service; Project Structure<pre><code>start-django (root)\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 .env # what is used for local setup in machine\n\u251c\u2500\u2500 .env.fly # ensure part of .gitignore\n\u251c\u2500\u2500 .gitignore # prevent .env / .env.fly.sqlite from being pushed\n</code></pre> <ol> <li>Create file, e.g. <code>.env.fly</code> at project root</li> <li>Make sure to add the created file to list of items in <code>.gitignore</code></li> <li>We'll use <code>.env.fly</code> to setup fly secrets later on</li> </ol> Key Note ENV_NAME dev---test---prod, may be hard-coded in config <code>fly.toml</code>, <code>compose.yml</code> DJANGO_ALLOWED_HOSTS will only allow connections with fixed values; security measure; may be hard-coded in config <code>fly.toml</code>, <code>compose.yml</code> DJANGO_DEBUG True---False,  may be hard-coded in config <code>fly.toml</code>, <code>compose.yml</code> EMAIL_RECIPIENT recipient-email-address-for-contact-form EMAIL_SENDER sender-email-address-for-transactional-emails Part of fly.toml<pre><code>...\n[env]\nENV_NAME = \"test\"\nDJANGO_DEBUG = true\nPORT = \"8080\"\nEMAIL_RECIPIENT = \"your-working@email-address-to-receive-emails\"\nEMAIL_SENDER = \"your-working@email-address-to-send-emails\"\nDEFAULT_FROM_EMAIL = \"what appears in your email &lt;donotreply@your.domain&gt;\"\n...\n</code></pre> <p><code>EMAIL_SENDER</code>: Transactional Emails</p> <p>This boilerplate uses <code>python-postmark</code>, see github library.</p> <p>The value of <code>POSTMARK_SENDER</code> must first be created in the postmarkapp website.</p> <p>After it's created, can modify both the <code>POSTMARK_SENDER</code> and <code>DEFAULT_FROM_EMAIL</code> that is declared in <code>fly.toml</code>. Note Django's send_email() which depends on <code>DEFAULT_FROM_EMAIL</code>.</p>"},{"location":"deploy/prep/#run-django-check","title":"Run Django check","text":"<p>Modify .env by copy/pasting secrets from <code>.env.fly</code> to test your future deployment:</p> Bash<pre><code>python manage.py check --deploy\n</code></pre> <p>If satisfied with the results of the check, can proceed to deploy using the variables you've tested with.</p>"},{"location":"deploy/prep/#install-fly","title":"Install fly","text":"<p>Install flyctl then signup via the commandline.</p> <p>fly v1 to v2</p> <p>Fly is presently going through various changes, specifically migrating from v1 (called the nomad platform) to v2 (running on Fly Machines). The instructions contained here will use v2.</p> <p>The <code>fly cli</code> is frequently being updated. Notes applicable to:</p> Terminal Console<pre><code>fly version\n# fly v0.0.538 darwin/arm64 ...\n</code></pre>"},{"location":"deploy/prep/#add-redis_url","title":"Add <code>REDIS_URL</code>","text":"<p>If already existing, can simply reuse an existing <code>REDIS_FLY_URL</code>. Otherwise, if not yet existing:</p> Note url generated<pre><code>fly redis create --name 'reusable-redis-app' # results in REDIS_FLY_URL (1)\n</code></pre> <ol> <li>Will receive prompt. \"Your Upstash Redis database start-redis-db is ready. Apps in the personal org can connect to at . If you have redis-cli installed, use fly redis connect to connect to your database.\" Verify existence via <code>fly redis list</code>"},{"location":"deploy/prep/#preconfigured-flytoml","title":"Preconfigured <code>fly.toml</code>","text":"<p>Normally for setting up a project, one would run fly launch - this would generate a <code>fly.toml</code> configuration file for use in deploying a project to fly.io.</p> <p>I've already setup the files for this boilerplate so this step is no longer necessary.</p> Project Structure<pre><code>start-django (root)\n\u251c\u2500\u2500 deploy/\n\u251c\u2500\u2500 pg/\n\u251c\u2500\u2500 fly.toml\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 sq/\n\u251c\u2500\u2500 fly.toml\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 .env # what is used for local setup in machine\n\u251c\u2500\u2500 .env.fly # ensure part of .gitignore\n\u251c\u2500\u2500 .gitignore # prevent .env / .env.fly.sqlite from being pushed\n</code></pre>"},{"location":"deploy/prep/#static-files-in-flytoml","title":"Static files in <code>fly.toml</code>","text":"fly.toml<pre><code>...\n[[statics]]\nguest_path = \"/opt/src/static\"\nurl_prefix = \"/static\"\n</code></pre> <p>The <code>whitenoise</code> library is a dependency declared in <code>pyproject.toml</code>. It isn't as useful in fly.io since I won't be needing Django to serve static files.</p> <p>The statics section explains that I can offload this task to fly.io:</p> <p>When statics are set, requests under url_prefix that are present as files in guest_path will be delivered directly to clients, bypassing your web server. These assets are extracted from your Docker image and delivered directly from our proxy on worker hosts.</p> <p>In other words, when I set config.settings <code>STATIC_URL</code> and then run <code>python manage.py collectstatic</code>, I'm able to place all static files in the Docker image and I can use the location of our Django setting <code>STATIC_URL</code> to refer to this content.</p>"},{"location":"deploy/prep/#where-to-run-deploy","title":"Where to run deploy","text":"<p>Where to run <code>fly deploy</code>, what context is used</p> <p>Must be in <code>/root</code>.</p> <p>The <code>/deploy/pg/Dockerfile</code> and <code>/deploy/sq/Dockerfile</code> will use <code>COPY /src .</code> so this implies that the local machine is in the root directory since only a portion of the local machine, <code>/src</code> is copied as part of the build context to the container / virtual machine.</p>"},{"location":"extra/production-server/","title":"Web Server","text":""},{"location":"extra/production-server/#overview","title":"Overview","text":"<p>tl;dr: Runserver v. Gunicorn</p> <p>The <code>runserver</code> management command, producing the URL http://127.0.0.1:8000/, is useful only in local development environments. Gunicorn, for synchronous operations, is more suited for production environments.</p> <p>What is a web server? Testdriven.io makes a colorful introduction to the concept:</p> <p>Imagine for a moment that you are a web server, like Gunicorn. Your job consists of the following parts:</p> <ul> <li>You sit around and wait patiently for a request from some kind of a client.</li> <li>When a client comes to you with a request, you receive it.</li> <li>Then, you take this request to someone called PythonApp and say to him, \"Hey dude, wake up! Here's a request from a very important client. Please, do something about it.\"</li> <li>You get a response from this PythonApp.</li> <li>You then deliver this response back to your client.</li> </ul> <p>This is the only thing you do. You just serve your clients. You know nothing about the content or anything else. That's why you are so good at it. You can even scale up and down processing depending on the demand from the clients. You are focused on this single task.</p> <p>More specifically, gunicorn is a WSGI - a web server gateway interface; a web server would be something like nginx. And this gateway interface is what python apps like Django/Flask interface with to reach the actual web server:</p> pyproject.toml include's gunicorn<pre><code>[tool.poetry.dependencies]\npython = \"^3.11.3\"\ndjango = {version = \"^4.2.1\", allow-prereleases = true}\ngunicorn = \"^20.1\"\n...\n</code></pre> <p>How I presently understand the relationship:</p> <pre><code>flowchart LR\n    subgraph server-side\n        subgraph python\n            gunicorn---django\n        end\n        server(((web server)))&lt;---&gt;python\n    end\n    subgraph client-side\n        browser&lt;--http request-response---&gt;server\n    end</code></pre> <p>Gunicorn receives requests and processes it through  workers. Based on its docs:</p> <p>Gunicorn is based on the pre-fork worker model. This means that there is a central master process that manages a set of worker processes. The master never knows anything about individual clients. All requests and responses are handled completely by worker processes.</p> <p>Concretizing this description, I create this visual, mental model:</p> <pre><code>flowchart LR\n    subgraph gunicorn-master-process\n        subgraph django-app-worker-process-1\n            d1req(request: get endpoint '/about/')\n            d1res(response: render html template)\n            d1req--route request url to response view--&gt;d1res\n        end\n        subgraph django-app-worker-process-2\n            d2req(request: search 'hello world')\n            d2res(response: query db, show results)\n            d2req--route request url to response view--&gt;d2res\n        end\n        subgraph django-app-worker-process-3\n            d3req(request: user signup)\n            d3res(response: send email, request confirmation)\n            d3req--route request url to response view--&gt;d3res\n        end\n    end\n    nginx(((web server)))&lt;--request-response managed by gunicorn---&gt;django-app-worker-process-1\n    nginx(((web server)))&lt;--request-response managed by gunicorn---&gt;django-app-worker-process-2\n    nginx(((web server)))&lt;--request-response managed by gunicorn---&gt;django-app-worker-process-3</code></pre>"},{"location":"extra/production-server/#runserver-using-configwsgi","title":"Runserver using config.wsgi","text":"<p>How is <code>runserver</code> related to <code>config.wsgi</code>?</p> <p>According to  docs:</p> <p>runserver: ... This server uses the WSGI application object specified by the <code>WSGI_APPLICATION</code> setting.</p> <p>And in our settings, we see that</p> config/settings/_settings.py<pre><code>WSGI_APPLICATION = \"config.wsgi.application\"\n</code></pre>"},{"location":"extra/production-server/#gunicorn-using-configwsgi","title":"Gunicorn using config.wsgi","text":"<p>Async</p> <p>Lately, Django's interest has veered towards ASGI - asynchronous server gateway interface - as well. See Mariusz Felisiak's initial take on this in Running Tasks Concurrently in Django Asynchronous Views.  This boilerplate implementation is limited to the synchronous processes.</p> <p><code>gunicorn</code> replaces the built-in <code>python manage.py runserver</code> since the latter should NOT run in production. Django's warning is explicit:</p> <p>runserver: ... DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through security audits or performance tests. (And that\u2019s how it\u2019s gonna stay. We\u2019re in the business of making web frameworks, not web servers, so improving this server to be able to handle a production environment is outside the scope of Django.)</p> <p>The gunicorn docs contains a specific section on how it integrates with Django:</p> <p>Gunicorn will look for a WSGI callable named <code>application</code> if not specified. So for a typical Django project, invoking Gunicorn would look like:</p> <p>$ <code>gunicorn myproject.wsgi</code></p> scripts/web.sh<pre><code>gunicorn config.wsgi:application \\\n--bind 0.0.0.0:\"$PORT\" \\  # (1)\n--workers=2 \\ # (2)\n--worker-tmp-dir /dev/shm \\ # (3)\n--capture-output \\\n--enable-stdio-inheritance\n</code></pre> <ol> <li> <p>Instead of running the server in address <code>127.0.0.1</code> with port <code>8000</code>; we use <code>--bind 0.0.0.0</code> to an environment variable <code>PORT</code>. Why <code>0.0.0.0</code>? Itamar Turner-Trauring explains this in relation to Docker here and concludes with <code>0.0.0.0</code> means \"listen on all interfaces\".</p> </li> <li> <p>The most relevant setting affects the app's scalability are the type and number of workers.</p> <p>Re: type of worker, Gunicorn docs state:</p> <p>The most basic and the default worker type is a synchronous worker class that handles a single request at a time. This model is the simplest to reason about as any errors will affect at most a single request. Though as we describe below only processing a single request at a time requires some assumptions about how applications are programmed.</p> <p><code>sync</code> worker does not support persistent connections - each connection is closed after response has been sent (even if you manually add Keep-Alive or Connection: keep-alive header in your application).</p> <p>Re: number of workers, Gunicorn docs warn:</p> <p>DO NOT scale the number of workers to the number of clients you expect to have. Gunicorn should only need 4-12 worker processes to handle hundreds or thousands of requests per second.</p> </li> <li> <p>Helps avoid blocking requests. See gunicorn docs and Itamar Turner-Trauring's notes.</p> </li> </ol> <p>Re: <code>config.wsgi:application</code>.</p> <p>We know, by now, that config refers to the project folder. The config folder contains a <code>wsgi.py</code> file. This was originally created when running <code>django-admin startproject config</code>. This <code>wsgi.py</code> file refers to an <code>application</code>:</p> /config/wsgi.py<pre><code>import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings\")\napplication = get_wsgi_application()\n</code></pre> <p>This \"application callable\", as described, points to the Python path that the Django application will use.</p> <p>WSGI_APPLICATION: The full Python path of the WSGI application object that Django\u2019s built-in servers (e.g. runserver) will use. The <code>django-admin startproject</code> management command will create a standard <code>wsgi.py</code> file with an application callable in it, and point this setting to that application.</p>"},{"location":"extra/reactive-htmx/","title":"Reactive Partials with htmx","text":"<p>Better resources</p> <ol> <li>django-htmx</li> <li>Django + htmx, Luke Plant</li> <li>django-htmx-fun, Thomas G\u00fcttler</li> <li>todo, Jack Linke</li> <li>pyHAT-stack (https://github.com/PyHAT-stack/awesome-python-htmx)</li> </ol>"},{"location":"extra/reactive-htmx/#general-rule-full-html-page","title":"General Rule: full html page","text":"<p>A typical class-based view (CBV):</p> Form constructors<pre><code>class ContactForm(forms.Form): # (1)\n...\nclass ContactFormView(FormView): # (2)\ntemplate_name = \"pages/contact.html\"\nform_class = ContactForm\n...\n</code></pre> <ol> <li>May be contained in <code>forms.py</code> file but is joined here to illustrate a concept.</li> <li>May be contained in <code>view.py</code> file but is joined here to illustrate a concept.</li> </ol> <p><code>ContactFormView</code> instructs: on a GET request, render ContactForm in \"pages/contact.html\". Implied in this instruction: render the full html page. Django, by design, renders full pages on every request-response cycle.</p>"},{"location":"extra/reactive-htmx/#exception-partial-html-fragment","title":"Exception: partial html fragment","text":"<p>I deviate from the cycle by no longer rendering the full page on submission of the form. See overriden <code>form_valid()</code> and <code>form_invalid()</code> methods:</p> Both methods imply a prior POST request when a form is submitted<pre><code>class ContactFormView(FormView):\n...\ndef form_invalid(self, form): # (1)\nreturn TemplateResponse(self.request, \"pages/_contact_form.html\", {\"form\": form})\ndef form_valid(self, form): # (2)\nreturn TemplateResponse(self.request, \"pages/_contact_success.html\", {})\n</code></pre> <ol> <li>The default <code>form_invalid()</code> is a <code>render_to_response()</code></li> <li>The default <code>form_valid()</code> is a <code>HttpResponseRedirect()</code></li> </ol> <p>What is rendered is a template fragment, emphasized by convention <code>_&lt;template_name&gt;.html</code>.</p> <p>How do we accomplish partial rendering of content? We need to create divisions of the html page so that we can assign parts to render.</p> <p>Consider an identifiable division of the HTML page represented by <code>id=\"contact-form-area\"</code> that can be replaced without touching the other parts of the page.</p> htmx swapping can target the DOM node<pre><code>&lt;html&gt;\n&lt;!-- Other content in the page --&gt;\n  &lt;div id=\"contact-form-area\"&gt; {# (1) #}\n    &lt;form&gt;\n      ...\n      &lt;button type=\"submit\"\n        hx-post=\"/contact-form\"\n        hx-target=\"#contact-form-area\"\n      &gt;Let's talk&lt;/button&gt;\n    &lt;/form&gt;  {# (2) #}\n  &lt;/div&gt;\n&lt;!-- Other content in the page --&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li>This allows us to swap the identified element with a replacement fragment.</li> <li>Because of the identified DOM node <code>id=\"contact-form-area\"</code>, the htmx command <code>hx-post</code> (found in the submit button of the form proper) can render a partial HTML fragment after the form is submitted and the <code>form_valid()</code> function is invoked. The fragment will not affect the other parts of the page, only replacing the target <code>#contact-form-area</code>.</li> </ol>"},{"location":"extra/reactive-htmx/#prompt-user-of-field-error-on-form_invalid","title":"Prompt User of Field Error on <code>form_invalid()</code>","text":"<p>On <code>form_invalid()</code>, if a field error occurs, the form that is partially rendered will now contain error indicators for the specified field:</p> Show errors, if existing in the field<pre><code>{% for field in form %} {# (1) #}\n  &lt;div class=\"fieldWrapper\"&gt;\n{{ field.label_tag }}\n{{ field }}\n{% if field.errors %}  {# (2) #}\n      &lt;span class=\"prominent-tailwind-styling text-pink-500 text-xs\"&gt;\n{{ field.errors }}\n      &lt;/span&gt;\n{% endif %}\n  &lt;/div&gt;\n{% endfor %}\n</code></pre> <ol> <li>See notes on  making reusable form templates.</li> <li>Only display when field contains errors.</li> </ol>"},{"location":"extra/reactive-htmx/#prompt-user-of-non-field-error-on-form_invalid","title":"Prompt User of Non-Field Error on <code>form_invalid()</code>","text":"<p>On <code>form_invalid()</code>, if a non-field error occurs, we return the form instance like above but we include htmx-driven alerts itemizing each non-field error.</p> <p>What is an example of a non-field error? Consider a login form with <code>email</code> and <code>password</code> fields. The user can supply a random value that is valid, i.e. an email address that is properly formatted, i.e. john@thisdoesnotexist.com However, what if that email address doesn't exist in the database? This would result in a non-field error.</p> <p>In dealing with such errors, the conventional way of displaying the same is by highlighting the non-field errors above the form. See  Rendering fields manually. In contrast, see Messages as Styled Notifications</p>"},{"location":"extra/request-response/","title":"Request-Response Flow","text":"Django tl;dr <p>It handles  request-response  patterns between the client, usually a browser , and an http server </p> <p>It sources data from auto-generated <code>sql</code> queries, each called a <code>Queryset</code>.</p> <p>Server-side  <code>Views</code> are templates, built with <code>html</code> , <code>css</code> , and <code>js</code> , rendered via browser  response.</p> <p>It goes further by including the kitchen sink, i.e.</p> <ol> <li><code>orm-sql</code>  for many sql engines</li> <li><code>dtl/jinja</code>  templating language,</li> <li><code>seo</code> </li> <li><code>rss</code> , etc.</li> </ol> <pre><code>flowchart LR\n    subgraph request\n        url\n    end\n    subgraph server\n        django\n        subgraph batteries\n            orm\n            dtl\n            seo\n            rss\n        end\n    end\n    subgraph response\n        html\n        css\n        js\n    end\n    request--url endpoint---&gt;django--route to view--&gt;response</code></pre>"},{"location":"extra/request-response/#request-to-server","title":"request to server","text":"<p>We start with a url.</p> <p><code>runserver</code> gives us: http://127.0.0.1:8000/.</p> <p>Opening this url in the  browser initiates an <code>HttpRequest</code> to a server.</p> Dissect Runserver Prompt The Runserver URL<pre><code># This is how a Django project is run locally\npython manage.py runserver\n# Watching for file changes with StatReloader autoreload.\n# Performing system checks...\n# System check identified no issues (0 silenced).\n# March 01, 2023 - 00:00:00\n# Django version 4.2, using settings 'config.settings'\n# Starting development server at http://127.0.0.1:8000/\n# Quit the server with CONTROL-C.\n</code></pre> <p>Let's parse lines 8 and 9:</p> <ol> <li><code>config.settings</code> implies that, for this particular Django instance, the main project folder is named <code>config</code>.</li> <li>Django's local development server is running at a specific URL: <code>http://127.0.0.1:8000/</code></li> <li>While this is running, I can type the said URL in a browser and hit enter.</li> <li>I can expect that a <code>HttpRequest</code> will be sent to this running server.</li> <li>The server receives the request and returns, to the requesting browser, some <code>html</code>, <code>css</code>, and <code>js</code> as an <code>HttpResponse</code>.</li> <li>This pattern is known as the request-response cycle.</li> <li>Django will now look for an appropriate <code>urlpattern</code> route that matches the URL.</li> </ol> <p>In local environments, the server is django's <code>runserver</code>. In production environments, a popular choice of server is gunicorn.</p>"},{"location":"extra/request-response/#server-to-router-view","title":"server to  router +  view","text":"<p>Django matches the url endpoint to a developer-defined <code>UrlPattern</code> route.</p> <p>What is the endpoint? Well, it's the tip of the url. So the router's matching process goes something like this for url http://127.0.0.1:8000/:</p> <ol> <li> does the endpoint of http://127.0.0.1:8000/ match /about? No.</li> <li> does the endpoint of http://127.0.0.1:8000/ match /contact-us? No.</li> <li> does the endpoint of http://127.0.0.1:8000/ match /? Yes.</li> </ol> Dissect URL Routing <p>More technically, if the requested url is http://127.0.0.1:8000/, this represents an empty string <code>\"\"</code> following the backslash \"/\". How do we find the matching pattern in the code?</p> <p>If we look inside the <code>config.settings.base</code> module, there are many variables but our interest is in:</p> /config/settings/_settings.py<pre><code>ROOT_URLCONF = \"config.urls\"\n</code></pre> <p>This declares Django's routing system to be controlled by a <code>urls.py</code> file found in the <code>config</code> folder:</p> See /config/urls.py, the main router<pre><code>urlpatterns = [\n...\npath(\"accounts/\", include(\"allauth.urls\")),\npath(\"profiles/\", include(\"profiles.urls\")),\npath(\"\", TemplateView.as_view(template_name=\"home.html\"), name=\"home\"),\n# match found! in \"\"\n...\n]\n</code></pre>"},{"location":"extra/request-response/#server-sends-response-containing-a-view","title":"server sends  response containing a  view","text":"<p>The endpoint / is typically the homepage of the website.</p> <p>It's up to the developer to construct how this <code>View</code> looks like, typically by combining <code>html</code>, <code>css</code>, and <code>js</code> with data that is persisted in a database.</p> <p>So the route to / represents a pre-constructed homepage <code>View</code> .</p> Dissect View Templating <p>Django offers some class-based views to make displaying content simpler. In this case, we're using a minimal <code>TemplateView</code> (which inherits from <code>View</code>) relying on a certain \"home.html\". Where do we find this \"home.html\"?</p> <p>In our Django <code>config.settings.base</code> module, we determine where to source templates:</p> Templates Directory<pre><code>BASE_DIR = Path(__file__).resolve().parent.parent.parent\n...\nTEMPLATES = [\n{\n\"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n\"DIRS\": [BASE_DIR / \"templates\"],  # added\n\"APP_DIRS\": True,\n\"OPTIONS\": {\n...\n},\n},\n]\n</code></pre> Django Templating Language<pre><code>{% extends 'base.html' %} &lt;-- home.html is a partial template, its parents is base.html ---&gt;\n{% block content %}\n    &lt;h1&gt;Home&lt;/h1&gt;\n    &lt;article&gt;\n        &lt;p&gt;Sample &lt;mark&gt;text&lt;/mark&gt; highlighted for illustration.&lt;/p&gt;\n        &lt;blockquote&gt;This is a blockquote&lt;br&gt;- &lt;cite&gt;Quoting from a random person&lt;/cite&gt;&lt;/blockquote&gt;\n{% lorem 2 p random %}\n    &lt;/article&gt;\n{% endblock content %}\n</code></pre> <p>The content of <code>home.html</code> is what the browser will receive as a response. Although this doesn't look like much, it can contain subtemplates as implied by the very first line. If we look at the refernced \"base.html\" in Line 1, we can see the full page of \"home.html\"</p> <p>In the <code>/templates</code> directory, we see \"home.html\" which contains the following content:</p> base.html: see included css, js<pre><code>{% load static %}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n        &lt;meta name=\"description\" content=\"Sample description \"&gt; &lt;!-- # Customize content for search --&gt;\n{% block title %}&lt;title&gt;Test site sample&lt;/title&gt; {% endblock title %}&lt;!-- Enable title changes --&gt;\n{% include './_favicons.html' %}\n{% block custom_css %}\n            &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/@picocss/pico@1.*/css/pico.min.css\"&gt;\n{% block extra_css %}\n{% endblock extra_css %}\n{% endblock custom_css %}\n    &lt;/head&gt;\n    &lt;body class=\"container\"&gt;\n{% include './nav.html' %}\n{% include './_messages.html' %}\n{% block body %}\n{% block content %}\n            &lt;!-- This is what \"home.html\" populates --&gt;\n{% endblock content %}\n{% block base_js %}\n                &lt;script src=\"https://unpkg.com/htmx.org@...\"&gt;&lt;/script&gt;\n                &lt;script src=\"https://unpkg.com/hyperscript.org@...\"&gt;&lt;/script&gt;\n                &lt;script&gt;document.body.addEventListener(\"htmx:configRequest\", (e) =&gt; {e.detail.headers[\"X-CSRFToken\"] = \"{{ csrf_token }}\";});&lt;/script&gt;\n{% block extra_js %}\n{% endblock extra_js %}\n{% endblock base_js %}\n{% endblock body %}\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"extra/request-response/#summary","title":"Summary","text":"<p>We started with a requesting url http://127.0.0.1:8000/ and retrieved a viewable response.</p> <ol> <li>The  url's endpoint / made an <code>HttpRequest</code> to the server.</li> <li> <p>server pinged  routing and it replied with:</p> <p>\"Yes, I have a <code>View</code>  representing  request to endpoint /\"</p> </li> <li> <p>This <code>View</code>  is packaged into a <code>HttpResponse</code> for rendering in the  browser.</p> </li> <li>Since the <code>View</code>  will likely contain other urls... we can expect more  request-response  cycles.</li> </ol>"},{"location":"extra/why/","title":"Assorted Commentary","text":"<p>This boilerplate isn't for beginners since it assumes some level of familiarity.</p> <p>If you're a beginner, Will Vincent's books are likely your best bet in understanding Django better. He uses class-based views for his examples so this might be appreciated further by diving into Django Girls. Also note django tips by Thomas G\u00fcttler.</p> <p>Notable criticisms of Django</p> <p>The comments on HackerNews are often dismissive of Django in an Age of Javascript.</p> <p>The following articles, to me, provide better context on the general criticism of Django:</p> <ol> <li>In Defense of Crusty Old Swiss Army Knives</li> <li>authentik on Django: 500% slower to run but 200% faster to build</li> </ol> <p><code>tl;dr</code>: Django predates many, still capable. Enter Thor meme: \"still worthy\".</p>"},{"location":"references/conventions/","title":"Conventions Adopted","text":""},{"location":"references/conventions/#notable-elements","title":"Notable elements","text":"Element Description <code>alert-hq</code> Identifies the global notification area DOM node for showing Django-based messages. See messages. <code>background_&lt;verb_noun&gt;</code> Function name convention using a prefix <code>background_</code> denotes a process, described by <code>&lt;verb_noun&gt;</code>, to be undertaken in the background to avoid delaying the request-response cycle. See background tasks. <code>_&lt;template-name&gt;.html</code> Filename convention using an prefix <code>_</code> denotes partial template fragment"},{"location":"references/conventions/#htmx-based-views","title":"htmx-based Views","text":"Aspect Convention Signifies What Example prefix <code>view_</code> <code>view_</code> generic <code>HttpResponse</code> <code>view_whatever</code> retrieves full page <code>TemplateResponse</code> prefix <code>hx_</code> htmx-styled request/response <code>hx_personal_data_get</code> retrieves partial HTML fragment containing <code>EditPersonalData</code> form suffix <code>_get</code> implies <code>hx_</code> prefixed <code>&lt;form method=GET&gt;</code> views <code>hx_personal_data_get</code> (see above) shows unbound form suffix <code>_post</code> implies <code>hx_</code> prefixed <code>&lt;form method=POST&gt;</code> views <code>hx_personal_data_post</code> accepts bound <code>hx_personal_data_get</code> form"},{"location":"references/conventions/#functional-view-code-style","title":"Functional View Code Style","text":"app/views.py<pre><code>from django.http.request import HttpRequest # applied typing\nfrom django.template.response import TemplateResponse # applied typing\nfrom django.views.decorators.cache import never_cache\nfrom django.views.decorators.http import require_GET\n@never_cache # sample use of cache decorator\n@require_GET # explicit vs. implicit\ndef view_whatever(request: HttpRequest, whatever: str) -&gt; TemplateResponse:\nctx = {\"key\": \"some_value\"} # include context variables in template.html\nres = TemplateResponse(request, \"templates/template.html\", ctx) # one-liner\nres['HX-Trigger'] = \"SOMETHING\" # enables modifying response before rendering\nreturn res # compare delayed res vs. `return render(request, template, ctx)`\n</code></pre>"},{"location":"references/conventions/#url-patterns","title":"URL Patterns","text":"app/urls.py<pre><code>from django.urls import path\nfrom django.urls.resolvers import URLPattern # applied typing\nfrom .views import view_whatever, hx_personal_data_post\napp_name = \"profiles\" # namespaced urls\nurlpatterns: list[URLPattern] = [\n# explicit use of path function arguments; trailing comma\npath(\nroute=\"detail/&lt;slug:whatever&gt;\",\nview=view_whatever,\nname=\"detail\",\n),\npath(\nroute=\"name_bio/post\", # ends in form method\nview=hx_personal_data_post, # same as name, if possible\nname=\"hx_personal_data_post\",\n),\n...]\n</code></pre>"},{"location":"references/env-vars/","title":"Setup Local Environment Variables","text":"<p>During development I'll likely end up with a bunch of third-party secrets. The <code>.env</code> file with plaintext <code>KEY=VALUE</code> formatting is the traditional source of truth for these sensitive artifacts but these won't be saved to the repository, prompting the need for local secrets management.</p>"},{"location":"references/env-vars/#django","title":"Django","text":""},{"location":"references/env-vars/#env_name","title":"<code>ENV_NAME</code>","text":"<p>default: <code>dev</code>, may be either <code>dev</code>, <code>test</code>, or <code>prod</code>.</p> <p>Toggles the settings to use as employed in various environments:</p> <ol> <li>local dev</li> <li><code>fly.toml</code></li> <li><code>compose.yml</code></li> </ol>"},{"location":"references/env-vars/#django_debug","title":"<code>DJANGO_DEBUG</code>","text":"<p>default: not set; intended to override <code>DEBUG</code> in settings.</p> env state <code>dev</code> Always <code>True</code> <code>test</code> default: <code>False</code>, but overrideable via <code>DJANGO_DEBUG</code>. <code>prod</code> Always <code>False</code>"},{"location":"references/env-vars/#django_secret_key","title":"<code>DJANGO_SECRET_KEY</code>","text":"<p>default: random; must be explicitly set in <code>test</code> and <code>prod</code> environments.</p> <p>This is what populates  <code>SECRET_KEY</code>.</p> <p>Copy/paste the following snippet to generate your key in the console.</p> Generates key from command line.<pre><code>python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'\n</code></pre> <p>Add the generated value to the .env file:</p> /.env<pre><code>DJANGO_SECRET_KEY=\"key-generated-with-random-characters\" # (1)\n</code></pre> <ol> <li>Must enclose in double quotes to prevent escaping characters.</li> </ol>"},{"location":"references/env-vars/#django_allowed_hosts","title":"<code>DJANGO_ALLOWED_HOSTS</code>","text":"<p>This is what populates  <code>ALLOWED_HOSTS</code>.</p>"},{"location":"references/env-vars/#database","title":"Database","text":""},{"location":"references/env-vars/#database_url","title":"<code>DATABASE_URL</code>","text":"<p>Settings Modified</p> <p>TLDR: if the connection string <code>DATABASE_URL</code> is sqlite-like use this engine <code>django.db.backends.sqlite3</code>; otherwise, use this engine: <code>django.db.backends.postgresql</code></p>"},{"location":"references/env-vars/#overview","title":"Overview","text":"<p>This environment variable is adopted by convention even if it doesn't appear anywhere in the official Django documentation (as of Django 4.2).</p> <p>It refers to the connection of the server (handling the request-response cycle involving <code>html</code>, <code>css</code>, and <code>js</code>) to a database management system which in turn is governed by <code>sql</code>.</p> <pre><code>flowchart LR\n    subgraph db\n        sqlite\n        postgresql\n    end\ndjango--DATABASE_URL---&gt;db</code></pre> <p>Django supports many database engines but I prefer one of two: sqlite and postgresql.</p> TOML<pre><code>[tool.poetry.dependencies]\n...\ndj-database-url = \"^0.5.0\" # Necessary dependency\n...\n</code></pre>"},{"location":"references/env-vars/#conventions","title":"Conventions","text":"<p>The URL is a connection string with specific conventions applied by Jazzband's <code>dj_database_url</code> library. Listed here are the formats necessary for sqlite and postgresql:</p> Engine Django Backend Database URL Format postgres <code>django.db.backends.postgresql</code> postgres://<code>USER</code>:<code>PASSWORD</code>@<code>HOST</code>:<code>PORT</code>/<code>NAME</code> sqlite <code>django.db.backends.sqlite3</code> sqlite:///<code>PATH</code>"},{"location":"references/env-vars/#custom-function","title":"Custom function","text":"config/settings/_settings.py<pre><code>def add_postgres_or_sqlite(setting: dict) -&gt; dict:\nif name := setting.get(\"NAME\"):\nif name.endswith(\".db\") or name.endswith(\".sqlite\"):\nreturn setting | {\"ENGINE\": \"django.db.backends.sqlite3\"}\nreturn setting | {\n\"ENGINE\": \"django.db.backends.postgresql\",\n\"OPTIONS\": {\"connect_timeout\": 5},\n}\nDATABASES = {\n\"default\": add_postgres_or_sqlite(\nenv.dj_db_url(\"DATABASE_URL\", \"sqlite:///db.sqlite\")\n)\n}\n</code></pre>"},{"location":"references/env-vars/#email","title":"Email","text":""},{"location":"references/env-vars/#email_recipient","title":"<code>EMAIL_RECIPIENT</code>","text":"<p>The boilerplate contains a <code>pages</code> app which hosts a contact form. This form enables the visitor to submit a message whichi is emailed to the address contained in <code>EMAIL_RECIPIENT</code>. If this is not set, a placeholder is provided but this will not be sufficient when <code>ENV_NAME</code> is either <code>test</code> or <code>prod</code>.</p> /.env<pre><code>DJANGO_SECRET_KEY=\"key-generated-with-random-characters\"\nEMAIL_RECIPIENT=\"your@emailaddress.com\"\n</code></pre>"},{"location":"references/env-vars/#email_sender","title":"<code>EMAIL_SENDER</code>","text":"<p>The boilerplate makes use of transactional emails by virtue of <code>django-allauth</code> and <code>django.core.email.send_mail()</code>. When <code>ENV_NAME</code> is test or prod, a valid email sender implies a pre-configured email server. I've already setup an email address that is verified by Postmark to handle the same. If this is not set, a placeholder is provided but this will not be sufficient when <code>ENV_NAME</code> is either <code>test</code> or <code>prod</code>.</p> /.env<pre><code>DJANGO_SECRET_KEY=\"key-generated-with-random-characters\"\nEMAIL_RECIPIENT=\"your@emailaddress.com\"\nEMAIL_SENDER=\"bot@somesite.com\"\n</code></pre>"},{"location":"references/env-vars/#default_from_email","title":"<code>DEFAULT_FROM_EMAIL</code>","text":"<p>Affects the way the email address from the sender is viewed when using Postmark.</p> <p>When passing .env containing a space, e.g. \"start-django donotreply@mv3.dev\" use double quotes</p>"},{"location":"references/gotchas/","title":"Gotchas","text":""},{"location":"references/gotchas/#mismatched-keys-for-social-auth","title":"Mismatched Keys for Social Auth","text":"<p>Created secret keys for BaseTesting using <code>127.0.0.1</code> for the <code>callback url</code>. This can be found in 1password <code>auth-local</code></p> <p>Then setup a new site at <code>newsite.com</code>.</p> <p>Social authentication will no longer work with the newsite. Need a completely new callback url setup for <code>newsite.com</code></p>"},{"location":"references/gotchas/#django-template-tags","title":"Django Template Tags","text":"<p>Cannot use linebreak in between variables of templatetags, same goes for built-ins like <code>{% with %}</code> e.g:</p> Will prevent template from loading.<pre><code>{% test\ntitle='some title'\ncaption='some desc'\ncta='some path'\n%} {# won't work #}\n{% test title='some title' caption='some desc' cta='some path'%} {# works #}\n</code></pre> <p>See trac issue on multiline tags and SO question. I hope this issue gets revisited. In an age of inline hyperscript (or even alpine), overflowing tailwindcss classes, being able to add multiline custom template tags would definitely be welcome as part of the toolkit. In the same SO thread, a hack was proposed:</p> Python<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; from django.template import base\n&gt;&gt;&gt; base.tag_re = re.compile(base.tag_re.pattern, re.DOTALL)\n# Note the untouched base.tag_re = re.compile(r\"({%.*?%}|{{.*?}}|{#.*?#})\")\n</code></pre> <p>But I haven't tried this yet.</p>"},{"location":"references/gotchas/#not-in-working-directory-runserver","title":"Not in Working Directory (runserver)","text":"/root directory<pre><code>python manage.py runserver\n# python: can't open file '/path/to/start-django/manage.py': [Errno 2] No such file or directory\n</code></pre> <p>Must be in the proper <code>WORKDIR</code>, which is <code>/src</code> for local development:</p> /root/src directory<pre><code>cd src\npython manage.py runserver\n# System check identified no issues (0 silenced).\n# Date time shown\n# Django version 4.2, using settings 'config.settings'\n# Starting development server at http://127.0.0.1:8000/\n# Quit the server with CONTROL-C.\n</code></pre>"},{"location":"references/gotchas/#not-in-working-directory-tailwind","title":"Not in Working Directory (tailwind)","text":"<p>If within the /root/src directory, will not be able to run this properly.</p> root/src directory<pre><code>npx tailwindcss -i ./static/css/input.css -o ./static/css/output.css --watch\n# Specified input file ./static/css/input.css does not exist.\n</code></pre> <p>Must be in the root directory since this is where the <code>tailwind.config.js</code> file is located:</p> root directory<pre><code>cd src\nnpx tailwindcss -i ./src/static/css/input.css -o ./src/static/css/output.css --watch\n# Rebuilding...\n# Done in 111ms.\n</code></pre>"},{"location":"references/gotchas/#not-in-root-directory-mkdocs","title":"Not in Root Directory (mkdocs)","text":"/root/src directory<pre><code>mkdocs serve\n# Error: Config file 'mkdocs.yml' does not exist.\n</code></pre> <p>Must be in the root directory invoking the config file in the proper path:</p> /root directory<pre><code>mkdocs serve --config-file ./etc/mkdocs.yml\n# INFO     -  Building documentation...\n# INFO     -  Cleaning site directory\n# INFO     -  Documentation built in 1.05 seconds\n# INFO     -  [15:49:54] Watching paths for changes: 'docs', 'mkdocs.yml'\n# INFO     -  [15:49:54] Serving on http://127.0.0.1:8001/\n</code></pre>"},{"location":"references/gotchas/#unterminated-processes","title":"Unterminated Processes","text":"<p>When <code>Access to 127.0.0.1 was denied</code> shows up as a prompt in the browser:</p> Bash<pre><code>mkdocs serve # this should run in port 8001\n# When navigation to http://127.0.0.1:8001/, user is shown \"Access to 127.0.0.1 was denied.\"\nlsof -i tcp:8001 # (1)\n# COMMAND     PID   USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME\n# ControlCe 123   xxx    5u  IPv4 0xxxxxx      0t0  TCP *:afs3-fileserver (LISTEN)\n# ControlCe 456   xxx    6u  IPv6 0xxxxxx      0t0  TCP *:afs3-fileserver (LISTEN)\nkill -9 123 # (2)\nkill -9 456\nmkdocs serve #\n</code></pre> <ol> <li>Look for processes that are still running on a given port</li> <li>Remove all processes on the port</li> </ol>"},{"location":"references/gotchas/#accessibility","title":"Accessibility","text":""},{"location":"references/gotchas/#navigation","title":"Navigation","text":"<ol> <li><code>nav</code> update of <code>aria-current</code>.</li> </ol>"},{"location":"references/gotchas/#listbox-menu","title":"Listbox / Menu","text":"<ol> <li>Update <code>aria-activedescendant</code> of the list node</li> <li>Update <code>aria-selected</code> when the role is a <code>listbox</code> <code>option</code></li> </ol>"},{"location":"references/gotchas/#js-gotchas","title":"JS gotchas","text":"<ol> <li>Boolean attributes on comparing boolean values from DOM attributes</li> </ol>"},{"location":"references/gotchas/#docker-gotchas","title":"Docker gotchas","text":"<ol> <li>Sometimes volume data needs to be reset: docker-compose down --rmi all --volumes.</li> </ol>"},{"location":"references/gotchas/#wish-list","title":"Wish list","text":"<ol> <li>Arbitrary list making in django template language</li> </ol>"},{"location":"references/personalization/","title":"Customization","text":""},{"location":"references/personalization/#post-installation","title":"Post-installation","text":"<ol> <li>Add to <code>.gitignore</code>: <code>.vscode</code></li> <li>Revise <code>README.md</code>.</li> <li>Delete <code>/docs</code></li> <li>Reset source git: <code>rm -rf .git</code></li> </ol>"},{"location":"references/personalization/#revise-pyprojecttoml","title":"Revise pyproject.toml","text":"Insert your own values<pre><code>[tool.poetry]\nname = \"your app\"\nversion = \"0.0.1\"\ndescription = \"your description\"\nauthors = [\"your name &lt;your@email&gt;\"]\n</code></pre>"},{"location":"references/personalization/#adjust-initial-content","title":"Adjust initial content","text":"/src/static/img<pre><code>&lt;root&gt;\n\u251c\u2500\u2500 docs/ # can delete/modify this\n\u251c\u2500\u2500 src/ # main project folder\n\u251c\u2500\u2500 pages/\n\u251c\u2500\u2500 fixtures/\n\u251c\u2500\u2500 home.yml # list of features in Home, maps pages/views.py\n\u251c\u2500\u2500 legal.yml # where to place contracts / agreements\n\u251c\u2500\u2500 x.yml # list of repos in Popular, maps to pages/views.py\n\u251c\u2500\u2500 templates/\n\u251c\u2500\u2500 svg/ # where all the icons used by the boilerplate are stored\n</code></pre>"},{"location":"references/personalization/#enable-search","title":"Enable Search","text":"base.html<pre><code>&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;meta name=\"robots\" content=\"noindex\"&gt; # delete this line\n    ...\n  &lt;/head&gt;\n  ...\n&lt;/html&gt;\n</code></pre>"},{"location":"references/personalization/#change-favicons","title":"Change Favicons","text":"/src/static/img<pre><code>&lt;root&gt;\n\u251c\u2500\u2500 src/ # main project folder\n\u251c\u2500\u2500 static/\n\u251c\u2500\u2500 css/\n\u251c\u2500\u2500 img/ # find / replace here\n\u251c\u2500\u2500 js/\n\u251c\u2500\u2500 templates/\n\u251c\u2500\u2500 base.html\n</code></pre> Ensure replaced files match in base.html<pre><code>&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    ...\n    &lt;link rel=\"shortcut icon\" type=\"image/png\" href=\"{% static 'img/favicons/favicon.ico' %}\"/&gt;\n&lt;link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"{% static 'img/favicons/apple-touch-icon.png' %}\"&gt;\n&lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"{% static 'img/favicons/favicon-32x32.png' %}\"&gt;\n&lt;link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"{% static 'img/favicons/favicon-16x16.png' %}\"&gt;\n&lt;link rel=\"manifest\" href=\"{% static 'img/favicons/site.webmanifest' %}\"&gt;{# List of icons #}\n    ...\n  &lt;/head&gt;\n  ...\n&lt;/html&gt;\n</code></pre>"},{"location":"references/personalization/#finalize-social-auth-secrets","title":"Finalize Social Auth Secrets","text":"<p>If social auth does not work, look at the error, e.g. <code>redirect-uri-mismatch</code>. It may mean that the homepage url and the callback url must be first set to http since the site is not yet configured for https. Reset social auth secrets specific to the url, taking into account the host for the callback url, so that the proper callback url matches the production url.</p>"},{"location":"references/settings/","title":"Sensible defaults","text":""},{"location":"references/settings/#file-structure","title":"File structure","text":"Root folder<pre><code>&lt;root&gt;\n\u251c\u2500\u2500 .github/workflows/main.yml # ci\n\u251c\u2500\u2500 .vscode/ # configures mkdocs, ruff, pytest, etc., file associations\n\u251c\u2500\u2500 etc/ # example env variables\n\u251c\u2500\u2500 src/ # main project folder\n\u251c\u2500\u2500 config/ # project named config\n\u251c\u2500\u2500 settings/\n\u251c\u2500\u2500 __init__.py # switch env: dev | test | prod\n\u251c\u2500\u2500 _auth.py # django_allauth, postmark email\n\u251c\u2500\u2500 _settings.py # base settings\n</code></pre>"},{"location":"references/settings/#default-secrets","title":"Default Secrets","text":"local: 127.0.0.1test: 0.0.0.0fly: .fly.dev /etc/env.example.0.dev<pre><code>ENV_NAME= # If not set, will default to dev\nDJANGO_DEBUG= # If not set, DEBUG will always be False\nREDIS_URL=redis:// # If not set, will use Sqlite.Huey\nDATABASE_URL=postgres://db_usr:pw@localhost:5432/db_pg # Default: /src/data/start.sqlite\nDJANGO_SECRET_KEY= # If not set, will use a randomly generated secret when ENV_NAME is dev\nDJANGO_ALLOWED_HOSTS= # If not set, will always use a fixed list\nEMAIL_RECIPIENT= # If not set, will use default (used in contact form)\nEMAIL_SENDER=  # If not set, will use default (used in by transactional email service postmark)\nDEFAULT_FROM_EMAIL= # If not set, will use default (used in by transactional email service postmark)\n# APIs\nPOSTMARK_API_KEY= # If not set, Postmark will not work\nGOOGLE_ID= # If not set, Google oAuth will not work with 127.0.0.1\nGOOGLE_KEY= # If not set, Google oAuth will not work with 127.0.0.1\nGITHUB_ID= # If not set, Github oAuth will not work with 127.0.0.1\nGITHUB_KEY= # If not set, Github oAuth will not work with 127.0.0.1\nCF_ACCT_ID=cloudflare-account # If not set, remote media storage of images will not work\nCF_IMG_TOKEN=cloudflare-secret # If not set, remote media storage of images will not work\nCF_IMG_HASH=cloudflare-hash # If not set, remote media storage of images will not work\n</code></pre> /deploy/env.common.tpl: secret references are expanded via 1Password cli<pre><code># Absent: DATABASE_URL + REDIS_URL; present in compose.yml\nENV_NAME=test\nDJANGO_SECRET_KEY='testing-key-needed'\nDJANGO_DEBUG=True\nPOSTMARK_API_KEY=op://dev/postmark/credential\nDEFAULT_FROM_EMAIL=\"start-django &lt;donotreply@mv3.dev&gt;\"\nEMAIL_RECIPIENT=op://dev/start-django/email/recipient\nEMAIL_SENDER=op://dev/start-django/email/sender\nGOOGLE_ID=op://dev/auth-local/google/id\nGOOGLE_KEY=op://dev/auth-local/google/secret\nGITHUB_ID=op://dev/auth-container/github/id\nGITHUB_KEY=op://dev/auth-container/github/secret\nCF_ACCT_ID=op://dev/cloudflare/acct_id\nCF_IMG_TOKEN=op://dev/cloudflare/images/token\nCF_IMG_HASH=op://dev/cloudflare/images/hash\n</code></pre> /deploy/env.fly.tpl: secret references are expanded via 1Password cli<pre><code># Note the change of secrets from test re: Google, Github, new url = new tokens\n# Note new REDIS_URL from test\n# Note absence of DATABASE_URL, set independently by fly.io\nDJANGO_SECRET_KEY=op://dev/start-django/django/secret_key\nDJANGO_ALLOWED_HOSTS=op://dev/start-django/django/allowed_hosts\nEMAIL_RECIPIENT=op://dev/start-django/email/recipient\nEMAIL_SENDER=op://dev/start-django/email/sender\nDEFAULT_FROM_EMAIL=op://dev/start-django/email/default\nGOOGLE_ID=op://dev/start-django/google/id\nGOOGLE_KEY=op://dev/start-django/google/secret\nGITHUB_ID=op://dev/start-django/github/id\nGITHUB_KEY=op://dev/start-django/github/secret\nCF_ACCT_ID=op://dev/cloudflare/acct_id\nCF_IMG_TOKEN=op://dev/cloudflare/images/token\nCF_IMG_HASH=op://dev/cloudflare/images/hash\nREDIS_URL=op://dev/fly-redis/credential\nPOSTMARK_API_KEY=op://dev/postmark/credential\n</code></pre>"},{"location":"references/settings/#environment-switcher","title":"Environment Switcher","text":"<p>This boilerplate's <code>ENV_NAME</code> settings (<code>dev</code>, <code>test</code>, <code>prod</code>) is shorthand for \"toggle settings so app behaves like this for state <code>dev</code>, etc.\". To be clear on what I mean by <code>test</code> and <code>prod</code> in a hand-wavvy outline mode:</p> <p><code>test</code>, <code>prod</code></p> testprod <p>I use <code>test</code> to denote that <code>DEBUG=False</code> and now need to make sure that Django app can function as expected in the real world.</p> <p>I'll toggle settings depending on need:</p> <ol> <li>use <code>gunicorn</code> or <code>runserver_plus</code> instead of runserver</li> <li>try email service, e.g. from <code>django.core.mail.backends.console.EmailBackend</code> to <code>postmark.django_backend.EmailBackend</code></li> <li>save images from MEDIA_ROOT (<code>/mediafiles</code>) in the file system to a remote solution like Cloudflare Images</li> <li>Ensure social authentication works with <code>127.0.0.1</code> / <code>localhost</code> or with containerized environments using <code>0.0.0.0</code></li> <li>Since <code>DEBUG</code>here is adjustable and defaults to <code>False</code>, need to explicitly state that DEBUG is <code>True</code> for staticfiles to be served. See reference box</li> <li>Compress static files to evaluate footprint in browser</li> </ol> <ol> <li>Host and database is now selected</li> <li>Considerations of authentication, consent and compliance are introduced</li> <li>Prevent runtime if missing first &amp; third-party secret</li> <li>Apply security settings to local context</li> <li>Ensure <code>.env</code> file secrets now stored in more secure location for later reuse</li> <li>Django now prepared for public use in live deployment</li> </ol> switch<code>dev</code><code>test</code><code>prod</code> Base switcher in /settings/__init__.py<pre><code>match ENV_NAME := env(\"ENV_NAME\", \"dev\").lower():\ncase \"dev\":\n...\ncase \"test\":\n...\ncase \"prod\":\n...\n</code></pre> When ENV_NAME is dev or not set<pre><code># (1)\nDEBUG = True\n# (2)\nSECRET_KEY = env(\"DJANGO_SECRET_KEY\", get_random_secret_key())\n# (3)\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# (4)\nignore_warnings()\n</code></pre> <ol> <li>When not explicitly declared <code>DEBUG</code> default is <code>False</code>.</li> <li>Will generate a random key if no environment variable <code>DJANGO_SECRET_KEY</code> is detected.</li> <li>Overrides postmark</li> <li>Limit text being displayed in the terminal during development.</li> </ol> When ENV_NAME is test<pre><code># (1)\nSECRET_KEY = env(\"DJANGO_SECRET_KEY\")\n# (2)\nif DEBUG := env.bool(\"DJANGO_DEBUG\", False):\n# (3)\nINTERNAL_IPS = ALLOWED_HOSTS\n# (4)\ncheck_auth()\n# (5)\nEMAIL_BACKEND = \"postmark.django_backend.EmailBackend\"\n</code></pre> <ol> <li>If this <code>SECRET_KEY</code> not set, will error out</li> <li>Enable <code>DEBUG</code> even on <code>ENV_NAME</code> test</li> <li>Used by django_debug_toolbar</li> <li>Ensures that social authentication and email settings have been changed and/or configured.</li> <li>Uses an email server for transactional emails</li> </ol> When ENV_NAME is prod<pre><code># (1)\nSECRET_KEY = env(\"DJANGO_SECRET_KEY\")\n# (2)\ncheck_auth()\n# (3)\nEMAIL_BACKEND = \"postmark.django_backend.EmailBackend\"\n# (3)\nCSRF_COOKIE_SECURE = True\nSECURE_BROWSER_XSS_FILTER = True\nX_FRAME_OPTIONS = \"DENY\"\nSECURE_SSL_REDIRECT = True\nSECURE_HSTS_SECONDS = 2592000\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nSESSION_COOKIE_SECURE = True\nSECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\n</code></pre> <ol> <li>If this <code>SECRET_KEY</code> not set, will error out</li> <li>Ensures that social authentication and email settings have been changed and/or configured.</li> <li>Uses an email server for transactional emails</li> <li>Refer to Django security settings</li> </ol>"},{"location":"references/tailwind-setup/","title":"Tailwinding Django","text":""},{"location":"references/tailwind-setup/#outputcss","title":"<code>output.css</code>","text":""},{"location":"references/tailwind-setup/#the-file","title":"The File","text":"<p>The goal is to finalize an <code>output.css</code> definition file covering utility classes declared in templates.</p> /src/templates/base.html<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"{% static 'css/output.css' %}\"&gt;\n  &lt;/head&gt;\n  ...\n&lt;/html&gt;\n</code></pre> <p>Tailwind's build step is intended to be running the entire time during development.</p> <p>So while I'm modifying applicable templates, the build step will constantly change the <code>output.css</code> file.</p> <p>As an example, when I add a never-before used utility class, e.g. <code>bg-orange-400</code> to a Tailwind-discoverable template fragment, the build process will modify the <code>output.css</code> so that the definition of <code>bg-orange-500</code> is created in the <code>output.css</code> file (which is then cascaded by <code>base.html</code> to the entire website.)</p>"},{"location":"references/tailwind-setup/#the-templates","title":"The Templates","text":"<p>The question then arises, how do I make the files discoverable so that definitions are automatically added?</p> <p>This is a partial fragment of the present settings:</p> /src/config/settings/_settings.py<pre><code>...\nSTATICFILES_DIRS = [str(BASE_DIR / \"static\")] # (1)\nTEMPLATES = [\n{\n\"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n\"DIRS\": [BASE_DIR / \"templates\"],  # (2)\n\"OPTIONS\": {\"context_processors\": [...]},\n},\n]\n</code></pre> <ol> <li>In the event that I use Tailwind classes in js files, which are found in <code>/src/static/js</code>, I'll want Tailwind to automatically create the definitions.</li> <li>I'll definitely be using Tailwind classes in html files and these are found in <code>/src/templates</code>.</li> </ol> <p>By simple declarations in the config file, Tailwind is instructed to discover utility classes in these filetypes found in specified locations:</p> /tailwind.config.js<pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\ndarkMode: \"class\",\ncontent: [ // (1)\n\"src/templates/**/*.{html,js}\", // (2)\n\"src/static/js/**/*.js\", // (3)\n],\nplugins:  [...] // already populated,\n}\n</code></pre> <ol> <li>Add the locations here or follow the more dynamic approach described by Carlton Gibson</li> <li>See <code>STATICFILES_DIRS</code> (<code>/src/static</code>)</li> <li>See <code>TEMPLATES[0][DIRS]</code> (<code>/src/templates</code>)</li> </ol>"},{"location":"references/tailwind-setup/#the-build-step","title":"The Build Step","text":"<p>Now that we know what to look for, where to look for them, and the eventual destination of the definitions... how do we start the process? Tailwind's build process command, touched on earlier, needs to run separately from Django's <code>runserver</code> command.</p> In a separate terminal console<pre><code>npx tailwindcss \\ # build process\n-i ./static/css/input.css \\ # (1)\n-o ./static/css/output.css \\ # (2)\n--watch # will run in the background\n</code></pre> <ol> <li><code>-i</code> is shorthand for <code>--input</code></li> <li><code>-o</code> is shorthand for <code>--output</code></li> </ol> <p>It will simply watch for changes made in Tailwind's required <code>input.css</code> and the <code>content</code> location values found in <code>tailwind.config.js</code>. Every time a change is made, the <code>output.css</code> file is either created or updated.</p> <p>Since the command is a bit verbose, I've created a shortcut with <code>just tw</code>.</p>"},{"location":"references/tailwind-setup/#installation","title":"Installation","text":"<p>TailwindCSS Native</p> <p>django-tailwind integrates better but I prefer the manual process in case I need to make adjustments later on.</p> <p>Reminders Only</p> <p>The steps here are outlined so that I'm reminded on how I prepared the present <code>tailwind.config.js</code></p>"},{"location":"references/tailwind-setup/#install-node_modules","title":"Install <code>/node_modules</code>","text":"<p>The <code>node_modules</code> folder is hosted in the root project folder. These our necessary to continuously generate the <code>output.css</code>:</p> /node_modules<pre><code>npm install -D tailwindcss \\\n@tailwindcss/typography \\\n@tailwindcss/forms \\\n@tailwindcss/aspect-ratio \\\n@tailwindcss/container-queries # (1)\n</code></pre> <ol> <li>Check that the <code>/node_modules</code> contains the plugin folders.</li> </ol> <p>To prevent git inclusion of the <code>/node_modules</code> folder, add to the root folder's <code>.gitignore</code> file:</p> .gitignore<pre><code>.DS_Store\n.ruff_cache\nnode_modules\n...\n</code></pre>"},{"location":"references/tailwind-setup/#create-config-file","title":"Create config file","text":"<p>Initialize the configuration file.</p> Create tailwind.config.js<pre><code>npx tailwindcss init # generates near empty config\n</code></pre>"},{"location":"references/tailwind-setup/#add-installed-node_modules","title":"Add installed <code>node_modules</code>","text":"<p>Add plugins installed above to the config file.</p> /tailwind.config.js<pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\ndarkMode: \"class\",\ncontent: [],\nplugins:  [ // (1)\nrequire(\"@tailwindcss/typography\"),\nrequire(\"@tailwindcss/forms\"),\nrequire(\"@tailwindcss/aspect-ratio\"),\nrequire(\"@tailwindcss/container-queries\"),\n],\n}\n</code></pre>"},{"location":"references/tailwind-setup/#entrypoint-inputcss","title":"Entrypoint <code>input.css</code>","text":"<p>For the <code>output.css</code> to be built, I need to ensure an <code>input.css</code>, conventional name recommended in Tailwind's installation docs.</p> <p>I create this under <code>./static/</code> with basic directives (but modify it later on):</p> /src/static/input.css<pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre>"},{"location":"references/tailwind-setup/#compression","title":"Compression","text":"<p>Generating <code>output.css</code> covering Django html templates and other static files will likely result in multiple, large files. This can be optimized. <code>django-compressor</code> is an optimization tool to make multiple files into a single cacheable unit. Though this also applies to javascript files, the following documentation relates to the <code>output.css</code> produced by TailwindCSS.</p>"},{"location":"references/tailwind-setup/#install-compressor","title":"Install compressor","text":"Can also use pip, etc.<pre><code>poetry add django-compressor\n</code></pre> config.settings.base.py<pre><code>INSTALLED_APPS = [\n\"django.contrib.staticfiles\",\n\"compressor\",\n...\n]\n# see https://django-compressor.readthedocs.io/en/stable/\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"  # (1)\nCOMPRESS_ROOT = BASE_DIR / \"static\" # (2)\nCOMPRESS_ENABLED = True # (3)\nSTATICFILES_FINDERS = [\n\"django.contrib.staticfiles.finders.FileSystemFinder\",  # default\n\"django.contrib.staticfiles.finders.AppDirectoriesFinder\",  # default\n\"compressor.finders.CompressorFinder\", # (4)\n]\n</code></pre> <ol> <li>Where all the staticfiles are gathered after running <code>python manage.py collectstatic --noinput</code></li> <li>This is where the <code>/CACHE</code> folder will be created, i.e. <code>src/static/CACHE</code>. So after running <code>python manage.py compress</code>, we can expect <code>/css</code> and <code>/js</code> subfolders under <code>/CACHE</code></li> <li>Allow compression even when <code>DEBUG</code> is True. See <code>COMPRESS_ENABLED</code> setting in <code>django-compressor</code> docs.</li> <li>\"In case you use Django's staticfiles contrib app you have to add Django Compressor's file finder to the <code>STATICFILES_FINDERS</code> setting\" - <code>django-compressor</code> quickstart.</li> </ol>"},{"location":"references/tailwind-setup/#use-compress-tag","title":"Use compress tag","text":"<p>The tailwind-generated <code>output.css</code> file in the <code>base.html</code> will now be constantly compressed into a cached, optimized file. See example result.</p> base.html x output.css<pre><code>{% load static %}\n{% load compress %} {# (1) #}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    ...\n{% compress css %}\n      &lt;link rel=\"stylesheet\" href=\"{% static 'css/output.css' %}\"&gt; {# (2) #}\n{% endcompress %}\n    ...\n  &lt;/head&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li>Allows use of <code>{% compress css %}</code> and <code>{% compress js %}</code> tags.</li> <li>All stylesheets included between the <code>{% compress css %}</code> and <code>{% endcompress %}</code> tags will be compressed into a single <code>/static/CACHE/css</code> file.</li> </ol>"},{"location":"references/tailwind-setup/#collection-before-compression","title":"Collection before compression","text":"Produce cached files from output.css<pre><code># while in /src; note usage in scripts/web.sh and scripts/run.sh\npython manage.py collectstatic --noinput  # (1)\npython manage.py compress --force # (2)\n</code></pre> <ol> <li>Place files in the <code>STATIC_ROOT</code> folder, <code>--noinput</code> flag implies the user is not prompted for any kind of input.</li> <li>If <code>COMPRESS_OFFLINE</code> is <code>False</code> (default), can use <code>python manage.py compress --force</code> to override. The <code>compress</code> management command produces the <code>manifest.json</code></li> </ol> <p>Based on the above flow, static files from many sources (including the admin) are collected and then subsequently compressed into a single css / js file found in the <code>static/CACHE</code>, mapped out via a generated <code>manifest.json</code> file.</p>"},{"location":"setup/auth-email/","title":"Email Authentication","text":"<pre><code>  flowchart LR\n    a(potential signup) --signup with email address and password --&gt; z(AUTH_USER_MODEL populated)</code></pre> <p>This boilerplate adopts the following allauth settings:</p> /config/settings/_auth.py<pre><code>...\n\"\"\"Authentication will be by email vs. username\"\"\"\nACCOUNT_EMAIL_REQUIRED = True # (1)\nACCOUNT_USERNAME_REQUIRED = False # (2)\nACCOUNT_AUTHENTICATION_METHOD = \"email\" # (3)\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\" # (4)\n\"\"\"Authentication protocol\"\"\"\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1\nACCOUNT_EMAIL_SUBJECT_PREFIX = \"\" # (5)\nACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 86400 # (6)\nACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5\nACCOUNT_LOGOUT_ON_GET = True # (7)\nACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = \"account_email\" # (8)\nLOGIN_REDIRECT_URL = \"profiles:settings\" # (9)\n</code></pre> <ol> <li>The user is required to hand over an e-mail address when signing up.</li> <li>The user is required to enter a username when signing up. Note that the user will be asked to do so even if ACCOUNT_AUTHENTICATION_METHOD is set to email. Set to False when you do not wish to prompt the user to enter a username.</li> <li>Specifies the login method to use \u2013 whether the user logs in by entering their username, e-mail address, or either one of both. Setting this to \"email\" requires ACCOUNT_EMAIL_REQUIRED=True/</li> <li>Determines the e-mail verification method during signup \u2013 choose one of \"mandatory\", \"optional\", or \"none\". Setting this to \u201cmandatory\u201d requires ACCOUNT_EMAIL_REQUIRED to be True. When set to \u201cmandatory\u201d the user is blocked from logging in until the email address is verified.</li> <li>Instead of using <code>[Site]:</code> in the subject, remove it by replacing the prefix to an empty string <code>\"\"</code>\"\"\"</li> <li>86400 seconds = 1 day</li> <li>User does not need to confirm logout on click.</li> <li>When user is already logged in and adds an email address to his profile, redirect to django-allauth's email settings' reverse URL.</li> <li>On login, redirect to profile settings' reverse URL.</li> </ol>"},{"location":"setup/auth-fb/","title":"Facebook Social Authentication","text":"<p>This seems to require a privacy URL and a terms of service URL.</p>"},{"location":"setup/auth-fb/#allauth","title":"AllAuth","text":"<p>We need to secure the following values:</p> Key Value <code>FB_ID</code> Client id <code>FB_KEY</code> Client secret <p>This is per the configuration we set via django-allauth:</p> /config/settings/_auth.py<pre><code>SOCIALACCOUNT_PROVIDERS = {\n\"facebook\": {\n\"APP\": {\n\"client_id\": env(\"FB_ID\", None),\n\"secret\": env(\"FB_KEY\", None),\n\"key\": \"\",\n},\n\"METHOD\": \"js_sdk\",\n\"SCOPE\": [\"email\", \"public_profile\"],\n\"AUTH_PARAMS\": {\"auth_type\": \"reauthenticate\"},\n\"INIT_PARAMS\": {\"cookie\": True},\n\"FIELDS\": [\n\"id\",\n\"first_name\",\n\"last_name\",\n\"middle_name\",\n\"name\",\n\"name_format\",\n\"picture\",\n\"short_name\",\n],\n\"EXCHANGE_TOKEN\": True,\n\"VERIFIED_EMAIL\": False,\n\"VERSION\": \"v16.0\",\n\"GRAPH_API_URL\": \"https://graph.facebook.com/v16.0\",\n},\n...\n}\n</code></pre> <p>(Work in progress.)</p>"},{"location":"setup/auth-github/","title":"Github Social Authentication","text":"<p>Read Context</p> <p>For reusability, ensure to read the discussion on context so that the environment variables that are secured can be repurposed for testing in other websites later on.</p> <code>local</code> context <code>container</code> context <code>site</code> context  Field Value Homepage url <code>http</code>://127.0.0.1:8000/ Callback url <code>http</code>://127.0.0.1:8000/accounts/github/login/callback Field Value Homepage url <code>http</code>://0.0.0.0:8080/ Callback url <code>http</code>://0.0.0.0:8080/accounts/github/login/callback <p>Replace <code>start-django.fly.dev</code> with the new site.</p> Field Value Homepage url e.g. <code>https</code>://start-django.fly.dev Callback url e.g. <code>https</code>://start-django.fly.dev/accounts/github/login/callback/"},{"location":"setup/auth-github/#allauth","title":"AllAuth","text":"<p>We need to secure the following values:</p> Key Value <code>GITHUB_ID</code> Client id <code>GITHUB_KEY</code> Client secret <p>This is per the configuration we set via django-allauth:</p> /config/settings/_auth.py<pre><code>SOCIALACCOUNT_PROVIDERS = {\n\"github\": {\n\"APP\": {\n\"client_id\": env(\"GITHUB_ID\", None),\n\"secret\": env(\"GITHUB_KEY\", None),\n\"key\": \"\",\n}\n},\n...\n}\n</code></pre> <p>We secure these keys via the Github Console: <code>OAuth apps</code></p>"},{"location":"setup/auth-github/#form","title":"Form","text":"<p>Register:</p> Field Value Description Application name required Seen in consent screen Application logo optional Badge of trust in consent screen Homepage URL <code>site url</code> API key / id credential association Authorization callback URL <code>site url</code>/accounts/github/login/callback/ Successful login via <code>allauth</code>"},{"location":"setup/auth-github/#credentials","title":"Credentials","text":"<ol> <li>Note Client id.</li> <li>Click on generate a Client secret.</li> <li>Note warning after secret generated: Make sure to copy your new client secret now. You won\u2019t be able to see it again.</li> <li>Save id and secret.</li> </ol>"},{"location":"setup/auth-github/#login-window","title":"Login Window","text":""},{"location":"setup/auth-google/","title":"Google Social Authentication","text":"<p>Read Context</p> <p>For reusability, ensure to read the discussion on context so that the environment variables that are secured can be repurposed for testing in other websites later on.</p> <code>local</code> context <code>container</code> context <code>site</code> context  Field Value Homepage url <code>http</code>://127.0.0.1:8000/ Callback url <code>http</code>://127.0.0.1:8000/accounts/google/login/callback <p><code>0.0.0.0:8080</code> as Google redirect url</p> <p>Cannot register a container context for Google because the redirect uri of <code>0.0.0.0:8080</code> does not meet the validation criteria for a valid domain.</p> <p>Replace <code>start-django.fly.dev</code> with the new site.</p> Field Value Homepage url e.g. <code>https</code>://start-django.fly.dev Callback url e.g. <code>http</code>://start-django.fly.dev/accounts/google/login/callback/ User support email address Should be part of Google organization Developer contact email address - Test user email addresses (&lt; 100) -"},{"location":"setup/auth-google/#allauth","title":"AllAuth","text":"<p>We need to secure the following values:</p> Key Value <code>GOOGLE_ID</code> Client id <code>GOOGLE_KEY</code> Client secret <p>This is per the configuration we set via django-allauth:</p> /config/settings/_auth.py<pre><code>SOCIALACCOUNT_PROVIDERS = {\n\"github\": {\n\"APP\": {\n\"client_id\": env(\"GOOGLE_ID\", None),\n\"secret\": env(\"GOOGLE_KEY\", None),\n\"key\": \"\",\n}\n},\n...\n}\n</code></pre> <p>Visit console.</p>"},{"location":"setup/auth-google/#oauth-consent-screen","title":"OAuth consent screen","text":"<p>Create an app:</p> <p></p> <p>According to the <code>External</code> User Type for testing:</p> <p>Your app will only be available to users you add to the list of test users. Once your app is ready to publish, you may need to verify your app.</p> <p>Note optional badges of trust</p> <ol> <li>App logo</li> <li>Link to privacy policy as a badge of trust</li> <li>Link to terms of service</li> </ol>"},{"location":"setup/auth-google/#credentials-screen","title":"Credentials screen","text":"<p>After completing requisites of <code>OAuth consent screen</code>, can proceed to securing credentials.</p> <p></p> <p>Fields to consider:</p> Application type Authorized redirect URI <code>Web application</code> <code>https://start-django.fly.dev/accounts/google/login/callback/</code> <p>Submit to get Client id and Client secret</p>"},{"location":"setup/auth-social/","title":"Social Authentication","text":"<pre><code>  flowchart LR\n    a(potential signup) --button with github icon is clicked--&gt; z(AUTH_USER_MODEL populated)</code></pre>"},{"location":"setup/auth-social/#overview","title":"Overview","text":"<p>Social auth is also built-in, courtesty of django-allauth.</p> <p>For instance, users who choose Github login to the local address <code>127.0.0.1</code> will be prompted with a Github consent form.</p> <p>The callback function, generated in Github, will allow Github users to be authenticated without having to submit a username and password.</p>"},{"location":"setup/auth-social/#settings","title":"Settings","text":"<p>This boilerplate also adopts the following allauth settings with respect social authentication providers:</p> /config/settings/_auth.py<pre><code>SOCIALACCOUNT_EMAIL_VERIFICATION = \"none\" # (1)\nSOCIALACCOUNT_AUTO_SIGNUP = False # (2)\nSOCIALACCOUNT_PROVIDERS = { # (3)\n\"google\": {\n\"APP\": {\n\"client_id\": env(\"GOOGLE_ID\", None),\n\"secret\": env(\"GOOGLE_KEY\", None),\n}\n},\n\"github\": {\n\"APP\": {\n\"client_id\": env(\"GITHUB_ID\", None),\n\"secret\": env(\"GITHUB_KEY\", None),\n\"key\": \"\",\n}\n},\n}\n</code></pre> <ol> <li>Prevent email verification if auth is by social</li> <li>Although email verifification is not required, can prevent bypass and still require the user to consent to terms / conditions before signing up.</li> <li>I've already preconfigured Github and Google to use a local address <code>127.0.0.1</code> with my credentials but see the section on Contexts.</li> </ol> <p>To add a social provider to each live Django site, I'll need to do a few things:</p> <ol> <li>The desired social provider has been added to both <code>SOCIALACCOUNT_PROVIDERS</code> and <code>INSTALLED_APPS</code>.</li> <li>Environment variables containing specific credentials match the requesting environment's user request.</li> <li>The <code>callback url</code> based on allauth template is working.</li> </ol> <p>In order to get these credentials, an application must be made in the provider's website. See specific details for:</p> <ol> <li>Github</li> <li>Google</li> </ol>"},{"location":"setup/auth-social/#context","title":"Context","text":"context url purpose reusable <code>ENV_NAME</code> local http://<code>127.0.0.1</code>:8000 does it work? yes <code>dev</code> container http://<code>0.0.0.0</code>:8080 does it work? yes <code>test</code> start-django https://start-django.fly.dev (or <code>http://</code>) limited, ideally for secured (<code>https</code>) use only by designated url no <code>prod</code>"},{"location":"setup/auth-social/#reusability","title":"Reusability","text":"<p>In each of these environments, I'll need to secure key-value pairs to authenticate via Github, Google, Facebook, Apple, Telegram or whatever service that employs oAuth.</p> <p>Note the first two environments will be reusable for whatever website I'll develop with Django (or whatever framework, in whatever language, really) since this is really just my machine accessing the service using the declared urls.</p> <p>The third environment's url will only be useful in https://start-django.fly.dev.</p>"},{"location":"setup/auth-social/#issuance","title":"Issuance","text":"<p>django-allauth instructs:</p> <p>Most providers require you to sign up for a so called API client or app, containing a client ID and API secret. You must add a SocialApp record per provider via the Django admin containing these app credentials.</p> <p>I like to add the record via <code>.env</code> so that I can programatically reuse them rather than having to manually access the Django admin, adding a record per provider.</p> <p>Before I'm able to use this record however, I need to get issued a key-value pair and each provider has its own process of issuing secrets:</p> <p>Github  Google  Facebook </p>"},{"location":"setup/auth-social/#storage","title":"Storage","text":"<p>Once a provider issues a key-value pair in the form of:</p> Replace service_name with google, github, etc.<pre><code>&lt;service_name&gt;_id=the-id-supplied-by-service\n&lt;service_name&gt;_secret=the-secret-issued-based-on-id-above\n</code></pre> <p>... I should be able to store the pair for use but this carries inherent risks.</p> <p>Let's say the future social media giant Mastodon decides to become an oAuth Provider and is able to give me an <code>id</code> and <code>secret</code> for my website so I can create a Login with Mastodon button.</p> <p>How do I go about storing these fields for future use? The <code>.env</code> file in the root directory would be the most likely storage file.</p> Using plain-textUsing secret references <p>This \"plain-text method\", copy/pasting secrets into <code>.env</code> files, is a de facto practice absent a \"best practice\" system where developers can specify snippets for their apps / databases / websites from a secure location.</p> environment <code>mastodon_id</code> <code>mastodon_secret</code> local id-supplied-for-<code>127.0.0.1</code> secret-id-of-<code>127.0.0.1</code> container id-supplied-for-<code>0.0.0.0</code> secret-id-of-<code>0.0.0.0</code> site id-supplied-for-<code>start-django.fly.dev</code> secret-id-of-<code>start-django.fly.dev</code> <p>It's simpler to run a container with an <code>.env</code> file populated with plain-text:</p> Bash<pre><code>docker-compose -f ./src/scripts/sq/compose.sq.yml up --build\n</code></pre> <p>This compose.sq.yml should make reference to the <code>env_file</code> key:</p> /src/scripts/sq/compose.sq.yml<pre><code>services:\nredis_db:\n...\nsq_web:\nenv_file: .env # must supply plain-text secrets in the root\nbuild:\ncontext: .\ndockerfile: ./src/scripts/sq/Dockerfile\n</code></pre> <p>I'm a 1Password subscriber and I like that I'm able to use secret references as an add-on to their main service. So what I store in my .env file is not the token itself but rather a reference to the token:</p> environment <code>mastodon_id</code> <code>mastodon_secret</code> local op://dev/auth-<code>local</code>/mastodon_client/<code>id</code> op://dev/auth-<code>local</code>/mastodon_client/<code>secret</code> container op://dev/auth-<code>container</code>/mastodon_client/<code>id</code> op://dev/auth-<code>container</code>/mastodon_client/<code>secret</code> start-django op://dev/<code>&lt;site&gt;</code>/mastodon_client/<code>id</code> op://dev/<code>&lt;site&gt;</code>/mastodon_client/<code>secret</code> <p>Where are the tokens actually stored? In the 1Password client residing in the device. So when I run a management command requiring the use of these secrets, I'd do so via:</p> Shortcut  Terminal<pre><code>op run --env-file=\"../.env\" python manage.py runserver_plus\n</code></pre> Terminal<pre><code>just orun\n</code></pre> <p>There is more complexity involved, certainly, but with the upside of guarding against:</p> <ol> <li>storing plain-text secrets residing in my machine</li> <li>accidentally committing these to the repository, and</li> <li>risks attendant in either of these cases.</li> </ol> <p>Unfortunately, using <code>op run</code> to run a container doesn't work:</p> Will not work<pre><code>cd src &amp;&amp; op run --env-file=\"../.env\"  docker-compose --profile sq up --build\n</code></pre> <p>It's necessary to employ an \"injection\" mechanism using a template file:</p> Will work<pre><code>op inject -i ./src/scripts/sq/compose.yml.tpl -o compose.yml\ndocker-compose up --build\n</code></pre>"},{"location":"setup/background-tasks/","title":"Background Tasks","text":"<p>Run long-running tasks in the background, preventing lag in the request-response cycle. Example tasks included:</p> <ol> <li>an upload of user photo</li> <li>sending of contact form details to admin recipient</li> </ol> Relationship to async <p>Alternatively (or in tandem), can modify the codebase to make the operation asynchronous. See for instance the implementation of this setup, in relation to long running tasks, in Running Tasks Concurrently in Django Asynchronous Views. Might/should explore this setup once I'm able to grasp the async nuances.</p>"},{"location":"setup/background-tasks/#local-development","title":"Local Development","text":"<p>Connecting the Tooling</p> <p>At this point, I won't delay request-response cycle. I just want to demonstrate the interaction between:</p> <ol> <li>A task defined in </li> <li>A separate worker process</li> <li>A message broker</li> </ol> <p>For this purpose, I need to make some adjustments to the default boilerplate:</p> <ol> <li><code>huey</code> as the running worker process via <code>run_huey</code></li> <li>another sqlite database, e.g. <code>huey.db</code> as the huey message broker</li> </ol>"},{"location":"setup/background-tasks/#see-task-decorator","title":"See task decorator","text":"<p>The function below relates to the storage of an image by a caller function.</p> <p>Because of the <code>@task</code> decorator, if <code>immediate: False</code>, the call gets sent to the message broker instead and the function is returned immediately to the caller. This places the task decorated in the job queue to be resolved by <code>run_huey</code>.</p> profiles/tasks.py<pre><code>from huey.contrib.djhuey import task\n@task()\ndef background_store_img_form(upload: UploadedFile, name: str, store: Storage) -&gt; str:\n...\n</code></pre> <p>This means that the <code>run_huey</code> must be operational to handle the queued task.</p>"},{"location":"setup/background-tasks/#start-worker","title":"Start worker","text":"<p>There are several background task services, the most prominent of which is likely <code>celery</code>. Here I'll use <code>huey</code> and some default settings with a slight modification:</p> config/bases/local.py<pre><code>...\nREDIS_URL = None\nHUEY = {\"huey_class\": \"huey.SqliteHuey\", \"immediate\": False} # (1)\n</code></pre> <ol> <li>Instead of the default <code>huey_class</code>: <code>huey.RedisHuey</code> (which the boilerplate changes to <code>huey.MemoryHuey</code>), can use <code>huey.SqliteHuey</code> as simple message broker to demonstrate the job being consumed:</li> </ol> Open New Terminal Console<pre><code>python manage.py run_huey\n# [2023-03-22 14:20:25,776] INFO:huey.consumer:MainThread:Huey consumer started with 1 thread, PID 71269 at 2023-03-22 06:20:25.776677\n# [2023-03-22 14:20:25,776] INFO:huey.consumer:MainThread:Scheduler runs every 1 second(s).\n# [2023-03-22 14:20:25,776] INFO:huey.consumer:MainThread:Periodic tasks are enabled.\n# [2023-03-22 14:20:25,776] INFO:huey.consumer:MainThread:The following commands are available:\n# + profiles.tasks.background_store_img_url\n# + profiles.tasks.background_store_img_form # note inclusion of task\n...\n</code></pre> Text Only<pre><code>Without modification, when attempting to `run_huey`, will result in _huey.exceptions.ConfigurationError: Consumer cannot be run with Huey instances where immediate is enabled._\n</code></pre> huey.sqlitehuey vs. redis-server <p>Instead of using sqlite, can opt for <code>redis-server</code> running in the background.</p> <p>See macOS installation instructions. Note this is a global installation on the OS.</p> Terminal Console 1<pre><code>python manage.py run_huey\n</code></pre> Terminal Console 2<pre><code>redis-server # also brew services start redis\n</code></pre> <p>Note <code>python manage.py run_huey</code> creates the following files in the <code>src/</code> directory:</p> <ul> <li><code>huey.db</code></li> <li><code>huey.db-shm</code></li> <li><code>huey.db-wal</code></li> </ul> <p>The <code>huey.db</code>, as the message broker, will get populated per task queued.</p>"},{"location":"setup/background-tasks/#test-service","title":"Test service","text":"Open New Terminal Console<pre><code>python manage.py runserver # actual Django app\n</code></pre> <p>Change a photo from the settings dashboard and this will result in a new task being created in huey.</p> <p>From the huey console started above, we'll notice 2 new additional lines:</p> Huey Console<pre><code>...\n# [2023-03-22 14:20:25,776] INFO:huey.consumer:MainThread:The following commands are available:\n# + profiles.tasks.background_store_img_url\n# + profiles.tasks.background_store_img_form # note inclusion of task\n# ... INFO:huey:Worker-1:Executing profiles.tasks.background_store_img_form: 45a09254-bd89-4ad5-9bf3-efa7cc964cdf\n# ... INFO:huey:Worker-1:profiles.tasks.background_store_img_form: 45a09254-bd89-4ad5-9bf3-efa7cc964cdf executed in 0.005s\n</code></pre> <p>Inspecting <code>huey.db</code>, particularly <code>kv</code> table, note new entry added:</p> Using sqlite3 as message broker<pre><code>sqlite3 huey.db \".headers on\" \"select * from kv\"\n# queue|key|value\n# db.sqlite|45a09254-bd89-4ad5-9bf3-efa7cc964cdf|\ufffd\ufffd\n</code></pre>"},{"location":"setup/background-tasks/#localstaging-development","title":"Local/Staging Development","text":"<p>Prefatorily, it takes 6-8 seconds before Cloudflare is able to storage a new image associated with a user profile. This means that the user needs to wait for the process to complete before a response can be returned by the view. This makes Cloudflare Images uploads a suitable candidate as a background task.</p> <p>I'll reproduce the infrastructure described under Local Development to use Cloudflare Images instead of local file storage in saving uploaded image files. This implies using some env variables and getting redis up and running:</p> Add to .env<pre><code>ENV_NAME=test # (1)\nREDIS_URL=redis://redis:6379/0 # (2)\nCF_ACCT_ID=aaa # (3)\nCF_IMG_TOKEN=bbb\nCF_IMG_HASH=ccc\n</code></pre> <ol> <li> <p>Will enable the app use of Cloudflare instead of the local default</p> See sample implementation in profiles/utils.py used in profiles/models.py<pre><code>def select_storage():\n# since ENV_NAME is test, will not use default\nif settings.ENV_NAME == \"dev\":\nreturn storages[\"default\"]\nreturn storages[\"cloudflare_images\"]\nclass Profile(models.Model):\nimage = models.ImageField(storage=select_storage, blank=True, null=True)\n...\n</code></pre> </li> <li> <p>Implies redis will be running in the background</p> </li> <li>Assumes prior setup of Cloudflare Images</li> </ol> <p>Run 3 services simultaneously:</p> Terminal 1Terminal 2Terminal 3 Start service 1 in Terminal 1<pre><code>brew services start redis\n# or redis-server if this was installed in a virtual environment\n</code></pre> Start service 2 in Terminal 2, .venv<pre><code>python manage.py run_huey # make sure to be in /src\n</code></pre> Start service 3 in Terminal 3, .venv<pre><code>python manage.py runserver # make sure to be in /src\n</code></pre> <p>Like the scenario above, try changing a photo from the settings dashboard.</p> <p>This should result in a new task being created in <code>huey</code>.</p> <p>After the request is sent, a response can immediately be returned and the task of uploading an image to Cloudflare Images, a long-running task, gets handled by a worker process in the background.</p>"},{"location":"setup/background-tasks/#dockerstaging-development","title":"Docker/Staging Development","text":""},{"location":"setup/background-tasks/#compose","title":"compose","text":"<p>Use <code>compose.yaml</code> to build a local test environment that can make use of Cloudflare's API. It puts together the services described above so that it's possible to run the services by interconnected containers:</p> Partial file /src/compose.yaml defining 4 services: web, db, worker, redis_db<pre><code>services:\ndb: # may be sqlite or postgres\n...\nredis_db:\nimage: redis:7\ncommand: redis-server\nports:\n- \"6379:6379\"\nweb:\nenvironment:\n- ENV_NAME=test  # app will use Cloudflare API keys declared in .env\n- REDIS_URL=redis://redis_db:6379/0 # declared above\n...\ncommand: /opt/src/scripts/run.sh # = gunicorn server\ndepends_on:\n- db\n- redis_db\nworker:\nenvironment:\n- ENV_NAME=test\n- REDIS_URL=redis://redis_db:6379/0\n...\ncommand: /opt/src/scripts/worker.sh # = python manage.py run_huey\ndepends_on:\n- db\n- redis_db\n</code></pre> <p>See compose command in detail</p>"},{"location":"setup/cloudflare-images/","title":"Serve Image + Variants via Cloudflare Images","text":"<p>Cloudflare Images is a Paid Service</p> <p>With $5/month per 100k images stored and $1/month per 100k images delivered, this shaves off time I'd otherwise spend rolling out my own image service to serve, format, modify images in the cloud.</p>"},{"location":"setup/cloudflare-images/#why-cloudflare-images","title":"Why Cloudflare Images","text":"<p>See invocation to get a flexible server-generated image from Cloudflare:</p> Arbitrary variant<pre><code>&lt;img src=\"{{profile.image_url|variant:'w=200'}}\" alt=\"{{alt}}\"&gt; {# (1) #}\n</code></pre> <ol> <li>Creates <code>https://imagedelivery.net/.../w=200</code>: a flexible server-side variant</li> </ol> <p>I can define a named variant, e.g. <code>avatar</code> to refer to 240x240 pixels in the Cloudflare dashboard. This will ensure all images are sized with certain dimensions:</p> Named variant<pre><code>&lt;img src=\"{{profile.image_url|variant:'avatar'}}\" alt=\"{{alt}}\"&gt;&gt; {# (1) #}\n</code></pre> <ol> <li>Create <code>https://imagedelivery.net/.../avatar</code>: a pre-defined server-side variant</li> </ol> <p>I find $60/year a justifiable price to pay to not handle image management on the web for all my projects.</p>"},{"location":"setup/cloudflare-images/#imagefield-storage","title":"ImageField Storage","text":"<p>Uses  4.2 Storage Class</p> <p>See thin wrapper over Cloudflare Images v1 via separate library that I built. Relatedly, since this makes use of a third-party API for I/O, I use huey for this background task of uploading the image.</p> <p>When <code>ENV_NAME</code> is <code>dev</code>, user avatars will be stored in the <code>/src/mediafiles</code>. In non-<code>dev</code> environments, it will use the custom Storage Class.</p> profiles/models.py<pre><code>def select_storage(): # (1)\nif settings.ENV_NAME == \"dev\":\nreturn storages[\"default\"]\nreturn storages[\"cloudflare_images\"]\nclass Profile(TimeStampedModel):\n...\nimage = models.ImageField(storage=select_storage) # (2)\n...\n</code></pre> <ol> <li>Actually <code>select_storage()</code> is found in profiles/utils.py but is included here for context.</li> <li>See this convention in  reference.</li> </ol> See definition of <code>LimitedStorageCloudflareImages</code> used by <code>select_storage()</code> <p>The definition is sourced from a separate package I made for this purpose.</p> See cloudflare-images<pre><code>class LimitedStorageCloudflareImages(Storage):\ndef __init__(self):\nsuper().__init__()\nself.api = CloudflareImagesAPIv1()\ndef __repr__(self):\nreturn \"&lt;LimitedToImagesStorageClassCloudflare&gt;\"\ndef _open(self, name: str, mode=\"rb\") -&gt; File:\nreturn File(self.api.get(img_id=name), name=name)\ndef _save(self, name: str, content: bytes) -&gt; str:\ntimestamp = datetime.datetime.now().isoformat()\nres = self.api.post(f\"{name}/{timestamp}\", content)\nreturn self.api.url(img_id=res.json()[\"result\"][\"id\"])\ndef get_valid_name(self, name):\nreturn name\ndef get_available_name(self, name, max_length=None):\nreturn self.generate_filename(name)\ndef generate_filename(self, filename):\nreturn filename\ndef delete(self, name) -&gt; httpx.Response:\nreturn self.api.delete(name)\ndef exists(self, name: str) -&gt; bool:\nres = self.api.get(name)\nif res.status_code == HTTPStatus.NOT_FOUND:\nreturn False\nelif res.status_code == HTTPStatus.OK:\nreturn True\nraise Exception(\"Image name found but http status code is not OK.\")\ndef listdir(self, path):\nraise NotImplementedError(\n\"subclasses of Storage must provide a listdir() method\"\n)\ndef size(self, name: str):\nreturn len(self.api.get(name).content)\ndef url(self, name: str):\nreturn self.api.url(name)\ndef url_variant(self, name: str, variant: str):\nreturn self.api.url(name, variant)\ndef get_accessed_time(self, name):\nraise NotImplementedError(\n\"subclasses of Storage must provide a get_accessed_time() method\"\n)\ndef get_created_time(self, name):\nraise NotImplementedError(\n\"subclasses of Storage must provide a get_created_time() method\"\n)\ndef get_modified_time(self, name):\nraise NotImplementedError(\n\"subclasses of Storage must provide a get_modified_time() method\"\n)\n</code></pre>"},{"location":"setup/cloudflare-images/#cloudflare-images-setup","title":"Cloudflare Images Setup","text":"<p>It's a fairly straightforward process to create a Cloudflare Account.</p> <p>Visit the Cloudflare Images tab in the dashboard,  procure secrets and add them into the <code>.env</code> file.</p> Using plain-textUsing secret references Values are stored in raw text format<pre><code>CF_ACCT_ID=i-am-the-id\nCF_IMG_TOKEN=i-am-the-secret-for-the-id\nCF_IMG_HASH=part-of-url-of-every-image-served\n</code></pre> Actual values are stored in 1password<pre><code>CF_ACCT_ID=op://dev/cf-img/acct_id\nCF_IMG_TOKEN=op://dev/cf-img/token\nCF_IMG_HASH=op://dev/cf-img/hash\n</code></pre> <p>See same discussion on secret references in Social Auth setup.</p>"},{"location":"setup/email-postmark/","title":"Transactional Emails","text":"<p>Postmark is a Paid Service</p> <p>With 100 emails / month as their free tier, however, this is suitable for testing purposes. Afterwards, when the app starts receiving traction, pricing starts at $15/month for up to 10k emails sent/received.</p>"},{"location":"setup/email-postmark/#email-backend","title":"Email Backend","text":"<p>How do I send emails to the user when the following transactions happen?</p> <ol> <li>verify email address on signup; or</li> <li>reset password in case it's been forgotten?</li> </ol> <code>dev</code> default<code>test</code>/<code>prod</code> <p>In development mode, I use Django's email server at <code>django.core.mail</code> for handling transactional emails so that the email is served on the terminal rather than an smtp server: This is the import of the following line in <code>config.settings</code>:</p> /config/settings/_auth.py<pre><code>EMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\" # (1)\n</code></pre> <ol> <li>The  default is <code>\"django.core.mail.backends.smtp.EmailBackend\"</code>. This is considered the console backend. It will also be overriden, depending on <code>POSTMARK_API_KEY</code> in <code>settings/__init__.py</code>\"\"\"</li> </ol> <p>To guard against unset email servers in non-dev environments, I create the following some non-default env variables and check if they've been set by the user.</p> Ensures that test/prod values are set.<pre><code># in /config/settings/_auth.py\n_email = \"do@configure.separately\"  # (1)\nEMAIL_RECIPIENT = env(\"EMAIL_RECIPIENT\", _email)  # (2)\nEMAIL_SENDER = env(\"EMAIL_SENDER\", _email)  # (3)\nEMAIL_NOT_CONFIGURED = None  # If populated by criteria, use as error message.\nif not all([_email != EMAIL_RECIPIENT, _email != EMAIL_SENDER]):\nEMAIL_NOT_CONFIGURED = (f\"{EMAIL_SENDER=} and {EMAIL_RECIPIENT=} must be configured.\")\n# in /config/settings/__init__.py\nif ENV_NAME in [\"prod\", \"test\"]:\n...\nif POSTMARK_API_KEY: #\nEMAIL_BACKEND = \"postmark.django_backend.EmailBackend\"  # (4)\nif EMAIL_NOT_CONFIGURED:\nraise EnvError(EMAIL_NOT_CONFIGURED)\n</code></pre> <ol> <li>Placeholder for next 2 variables to ensure that this gets replaced, see related <code>EMAIL_NOT_CONFIGURED</code>.</li> <li>Needed by contact form in pages/tasks.py, see <code>background_send_contact_form_email()</code></li> <li>Transactional emails require a separate email server setup.</li> <li>Notice how this overrides the original setting in <code>dev</code></li> </ol> <p>In contrast, when <code>ENV_NAME</code> is <code>test</code>/<code>prod</code>, a proper email server like Sendgrid, Postmark, Mailgun, Amazon SES etc. will need to be setup. For now, I'll use Postmark.</p> /config/settings/__init__.py<pre><code>from ._auth import * # EMAIL_BACKEND will be overriden\nif ENV_NAME in [\"prod\", \"test\"]:\nif POSTMARK_API_KEY:\nEMAIL_BACKEND = \"postmark.django_backend.EmailBackend\"  # override\nif EMAIL_NOT_CONFIGURED:\nraise EnvError(EMAIL_NOT_CONFIGURED)\n</code></pre>"},{"location":"setup/email-postmark/#postmark-setup","title":"Postmark Setup","text":"<p>Ensure setup in the postmark web app before proceeding. This requires a Postmark account and a previously acquired domain name, e.g. <code>mv3.dev</code> is a domain name. General steps to follow:</p> <ol> <li>Postmark requires to add the domain.</li> <li> <p><code>DKIM</code> and <code>Return-Path</code> DNS records will be revealed afterwards. It will look something like this:</p> Hostname Type Value DKIM xxxxxx._domainkey TXT Return-Path pm-bounces CNAME </li> <li> <p>These records will need to be inputted in the domain registrar, e.g. Google, Cloudflare, Namecheap, etc.</p> </li> <li>I'll need to set these records from Postmark... in Namecheap since this is where I registered the domain.</li> <li>After setup in Namecheap, I revisit Postmark and in each of the records, click verify.</li> <li>After everything passes, generate <code>POSTMARK_API_KEY</code> from the dashboard, e.g. <code>xxx</code>, and add it to the <code>.env</code> file:</li> </ol> Using plain-textUsing secret references Values are stored in raw text format<pre><code>POSTMARK_API_KEY=i-am-the-secret\nEMAIL_RECIPIENT=i-can-be-any-forwardable-email-address\nEMAIL_SENDER=i-need-to-configured-as-a-sender-in-postmark\n\n# This additional configuration is already set in /_auth.py, see https://github.com/themartorana/python-postmark#django\nPOSTMARK_SENDER = EMAIL_SENDER # (1)\nPOSTMARK_TEST_MODE = False\nPOSTMARK_TRACK_OPENS = True\nPOSTMARK_RETURN_MESSAGE_ID = True\nDEFAULT_FROM_EMAIL = EMAIL_SENDER # (2)\n</code></pre> <ol> <li>Seeming duplication is intentional. In the event, I use Postmark, I just need to set <code>POSTMARK_SENDER</code>. If I need to switch to a different provider, I still retain the same logic for <code>EMAIL_SENDER</code>.</li> <li>Overrides default <code>webmaster@localhost</code>; without it, when running Postmark, results in <code>Unprocessable Entity: Invalid 'From' address: 'webmaster@localhost'.</code></li> </ol> Actual values are stored in 1password<pre><code>POSTMARK_API_KEY=op://dev/postmark/credential\nEMAIL_RECIPIENT=op://dev/start-django/email/recipient\nEMAIL_SENDER=op://dev/start-django/email/sender\n</code></pre> <p>See same discussion on secret references in Social Auth setup.</p>"},{"location":"setup/email-postmark/#test-configuration","title":"Test Configuration","text":"<ol> <li>Add .env vars: <code>ENV_NAME=test</code> and <code>POSTMARK_API_KEY=xxx</code></li> <li>Run <code>docker-compose --env-file .env up --build</code></li> <li>Login via regular email address and password</li> <li>Check that email has been received</li> <li> <p>Note that without formatting, the email will look barren:</p> <p> 6. Email markup in 2023 is still a headache. Consider notes from Cerberus templates, Maizzle, etc.</p> </li> </ol>"},{"location":"setup/summary/","title":"Setup Overview","text":""},{"location":"setup/summary/#files","title":"Files","text":"Project structure<pre><code>&lt;root&gt;\n\u251c\u2500\u2500 src/ # main project folder\n\u251c\u2500\u2500 data/ # where sqlite database should be stored\n\u251c\u2500\u2500 config/ # project named config\n\u251c\u2500\u2500 settings/\n\u251c\u2500\u2500 __init__.py # switch env: dev | test | prod\n\u251c\u2500\u2500 _auth.py # django_allauth, postmark email\n\u251c\u2500\u2500 _settings.py # base settings\n\u251c\u2500\u2500 static/\n\u251c\u2500\u2500 profiles/ # custom user + profile model app, manages user settings\n\u251c\u2500\u2500 pages/ # legalase + userconsent, basic pages, UI components\n\u251c\u2500\u2500 scripts/ # entrypoint for compose.yml, fly.toml\n\u251c\u2500\u2500 templates/ # contains base.html\n\u251c\u2500\u2500 account/ # overrides django-allauth html templates\n\u251c\u2500\u2500 socialaccount/ # overrides django-allauth html templates\n\u251c\u2500\u2500 svg/ # used by django-fragments\n\u251c\u2500\u2500 tests/ # with pytest-django\n\u251c\u2500\u2500 manage.py # management command\n</code></pre>"},{"location":"setup/summary/#default","title":"Default","text":"Aspect Scenario Configuration Expected Result Defaults to <code>sqlite</code>. If <code>postgres</code> desired, ensure <code>DATABASE_URL</code> setup in .env before running <code>just start</code> Local postgres instance used Emails default to <code>stdout</code> Setup Postmark (note, only 100/free per month) Transactional emails (and the contact form) will use Postmark to deliver emails Images use local file storage system Setup Cloudflare Images (note, $5 per month) Images uploaded/changed will be stored in Cloudflare Images Social auth errors out, e.g. \"Cannot encode None for key 'client_id' in a query string. Did you mean to pass an empty string or omit the value?\" Setup Google env vars,  Github env vars User can use Google and Github to signup without creating a password Background processes default to <code>{\"immediate\": True}</code>, i.e. no worker queue Use either <code>ENV_NAME</code> 'test' or 'prod'"},{"location":"setup/summary/#prelims","title":"Prelims","text":"<p>Transactional emails , remote storage , social auth  will not yet be cloud-ready until configured. If setting up these services for the first time, can expect this to take 15min to an hour. When addressed, <code>.env</code> can be populated with relevant key-value pairs:</p> Expected .env file values<pre><code># postmarkapp.com for transactional emails\nPOSTMARK_API_KEY=op://dev/postmark/credential\n\n# recipient email address for contact form\nEMAIL_RECIPIENT=op://dev/start-django/email/recipient\n\n# sender email address for transactional emails, configured with postmark\nEMAIL_SENDER=op://dev/start-django/email/sender\n\n# django-allauth social auth with google as provider\nGOOGLE_ID=op://dev/auth-local/google/id\nGOOGLE_KEY=op://dev/auth-local/google/secret\n\n# django-allauth social auth with github as provider\nGITHUB_ID=op://dev/auth-local/github/id\nGITHUB_KEY=op://dev/auth-local/github/secret\n\n# cloudflare images as storage class\nCF_ACCT_ID=op://dev/cf-img/acct_id\nCF_IMG_TOKEN=op://dev/cf-img/token\nCF_IMG_HASH=op://dev/cf-img/hash\n</code></pre> <p><code>op://</code> is a  convention for secret references in .env. Unnecessary if you don't use 1Password; can be replaced directly by explicit values, e.g. <code>DJANGO_SECRET_KEY=i-am-a-value</code>.</p>"},{"location":"setup/use-postgres/","title":"Setting Up Postgres","text":"<p>Optional</p> <p>It's perfectly fine to use <code>sqlite</code>. But in the event that you'd like a more robust client-server architecture, the steps below outline how to setup <code>postgres</code> in a local context.</p>"},{"location":"setup/use-postgres/#install-postgres-locally","title":"Install Postgres Locally","text":"<p>Ensure postgres is installed</p> Can you run psql?<pre><code>psql # enters the postgres shell\n# psql (15.2) ...\n# postgres=# (1)\n</code></pre> <ol> <li><code>postgres=#</code> implies postgres is installed in your machine with 'postgres' as superuser</li> </ol>"},{"location":"setup/use-postgres/#create-a-database-in-postgres","title":"Create a Database in Postgres","text":"Pre-Django setup inside psql<pre><code>postgres=# create user db_usr with password 'pw'; -- (1)\npostgres=# create database db_pg; -- (2)\npostgres=# grant all privileges on database db_pg to db_usr; -- (3)\npostgres=# \\c db_pg; -- (4)\nYou are now connected to database \"db_pg\" as user \"postgres\" (superuser)\ndb_pg=# grant create on schema public to db_usr; -- (4)\ndb_pg=# alter user db_usr createdb; -- (5)\n</code></pre> <ol> <li><code>CREATE ROLE</code> with <code>user</code> + <code>password</code></li> <li><code>CREATE DATABASE</code> named <code>db_pg</code></li> <li><code>GRANT</code> link <code>db_pg</code> to <code>user</code></li> <li>Need to connect as superuser to grant certain roles to <code>db_usr</code></li> <li>Needed by psycopg3 / django4.2</li> <li>Allow user to create db for running tests</li> </ol> Post-migration <p>After configuration of <code>DATABASE_URL</code> in the <code>.env</code> file, running either migration command -- <code>python manage.py makemigrations</code> or <code>python manage.py migrate</code> -- will use the models declared in Django. Running <code>python manage.py migrate</code> will produce the necessary tables in postgres.</p> \\dt shows list of tables post migration<pre><code>postgres=&gt; \\c db_pg db_usr;\nYou are now connected to database \"db_pg\" as user \"db_usr\".\ndb_pg=&gt; \\dt\n                        List of relations\nSchema |              Name              | Type  | Owner\n--------+--------------------------------+-------+--------\npublic | account_emailaddress           | table | db_usr\npublic | account_emailconfirmation      | table | db_usr\npublic | agreements                     | table | db_usr\npublic | agreements_authors             | table | db_usr\npublic | auth_group                     | table | db_usr\npublic | auth_group_permissions         | table | db_usr\npublic | auth_permission                | table | db_usr\npublic | django_admin_log               | table | db_usr\npublic | django_content_type            | table | db_usr\npublic | django_migrations              | table | db_usr\npublic | django_session                 | table | db_usr\npublic | django_site                    | table | db_usr\npublic | profiles                       | table | db_usr\npublic | profiles_user                  | table | db_usr\npublic | profiles_user_groups           | table | db_usr\npublic | profiles_user_user_permissions | table | db_usr\npublic | socialaccount_socialaccount    | table | db_usr\npublic | socialaccount_socialapp        | table | db_usr\npublic | socialaccount_socialapp_sites  | table | db_usr\npublic | socialaccount_socialtoken      | table | db_usr\npublic | user_consents                  | table | db_usr\n</code></pre> Delete/reset <p>When necessary, can delete the created database and restart the process:</p> PostgreSQL Console (Psql)<pre><code>db_pg=# \\c postgres -- transfer connection\npostgres=# drop database if exists db_pg;\nDROP DATABASE\n-- user can only be deleted after the database it's connected to is deleted\npostgres=# drop user if exists db_usr;\nDROP ROLE\n</code></pre>"},{"location":"setup/use-postgres/#set-database_url-in-env","title":"Set <code>DATABASE_URL</code> in <code>.env</code>","text":"<p>One of the initial setup commands is to rename <code>env.example</code> from /etc/ to <code>.env</code>.</p> <p>It will contain the sample DATABASE_URL but commented out:</p> Review env.example<pre><code>&lt;root&gt;\n\u251c\u2500\u2500 .venv # local virtual environment\n\u251c\u2500\u2500 /etc/env.example # when `just start` runs, a file .env is created in the &lt;root&gt; directory\n\u251c\u2500\u2500 src/ # main project folder\n\u251c\u2500\u2500 config/ # project named config\n...\n</code></pre> .env<pre><code># locally installed postgres database for start-django\n# DATABASE_URL=postgres://db_usr:pw@localhost:5432/db_pg\n...\n</code></pre> <p>Becuse of <code>DATABASE_URL</code> being commented out with the initial <code>#</code>, the environment variable is not read during runtime. The default <code>sqlite</code>  is then used. To override the behavior, before calling <code>just start</code> or a runserver variant, ensure the desired value resides in .<code>env</code> during runtime:</p> .env<pre><code>DATABASE_URL=postgres://db_usr:pw@localhost:5432/db_pg # note localhost\n</code></pre>"},{"location":"setup/use-postgres/#django-database_url","title":"Django + <code>DATABASE_URL</code>","text":"<p>The connection string, <code>postgres://db_usr:pw@localhost:5432/db_pg</code>, maps to:</p> Field Value Note <code>ENGINE</code> <code>postgres</code> Uses the postgres engine <code>NAME</code> <code>db_pg</code> <code>create database db_pg</code> <code>USER</code> <code>db_usr</code> <code>create user db_usr with password 'pw'</code> <code>PASSWORD</code> <code>pw</code> <code>create user db_usr with password 'pw'</code> <code>HOST</code> <code>localhost</code> default port in local machine <code>PORT</code> <code>5432</code> default port in local machine Using environs to extract DATABASE_URL<pre><code>&gt;&gt;&gt; from environs import Env\n&gt;&gt;&gt; env = Env()\n&gt;&gt;&gt; env.dj_db_url(\"DATABASE_URL\")\n{\n'NAME': 'db_pg',\n'USER': 'db_usr',\n'PASSWORD': 'pw',\n'HOST': 'localhost', # same as \"127.0.0.1\"\n'PORT': 5432,\n'CONN_MAX_AGE': 0,\n'ENGINE': 'django.db.backends.postgresql_psycopg2'\n}\n</code></pre> <p>According to  documentation:</p> Sample PostgreSQL settings<pre><code>DATABASES = {\n\"default\": {\n\"ENGINE\": \"django.db.backends.postgresql\",\n\"NAME\": \"mydatabase\",\n\"USER\": \"mydatabaseuser\",\n\"PASSWORD\": \"mypassword\",\n\"HOST\": \"127.0.0.1\",\n\"PORT\": \"5432\",\n}\n}\n</code></pre> <p>Under <code>4.2</code>'s release notes, <code>django.db.backends.postgresql_psycopg2</code> is still valid but the documentation uses <code>django.db.backends.postgresql</code> so I'll change the output of <code>env.dj_db_url()</code> via <code>add_postgres_or_sqlite()</code> for parity.</p> Modified ._settings.py<pre><code>...\ndef add_postgres_or_sqlite(setting: dict) -&gt; dict:\n\"\"\"Accepts the connection string's data dictionary from `dj_database_url`.\"\"\"\nif name := setting.get(\"NAME\"):\nif name.endswith(\".db\") or name.endswith(\".sqlite\"):\nreturn setting | {\"ENGINE\": \"django.db.backends.sqlite3\"}\nreturn setting | {\n\"ENGINE\": \"django.db.backends.postgresql\",\n\"OPTIONS\": {\"connect_timeout\": 5},\n}\nDATABASES = {\n\"default\": add_postgres_or_sqlite(\nenv.dj_db_url(\"DATABASE_URL\", \"sqlite:///db.sqlite\")\n)\n}\n</code></pre> <p>The <code>DATABASE_URL</code> is consumed in <code>/src/_settings.py</code> which modifies the way the original setting is actually set. The rationale for the modification is that during deployment, the <code>DATABASE_URL</code> is what is consumed so might as well start with this even during development.</p>"},{"location":"setup/user-model/","title":"Custom User Model","text":""},{"location":"setup/user-model/#authentication","title":"Authentication","text":"<p>How do I manage signup and login in Django?</p> <p>Authentication is pretty complex. Thankfully, third-party packages are available to make this more manageable:</p> <ol> <li>django-allauth</li> <li>Authlib</li> </ol> <p>I use allauth in this boilerplate so users are able to sign up via:</p> Authentication Mode Description Email Email signup via email address and password Social Signup via Google and Github <p>Maybe in the future, I can explore:</p> <ol> <li>login via mobile number</li> <li>magic email links (e.g. Slack)</li> </ol>"},{"location":"setup/user-model/#profiled-user-consent","title":"Profiled User Consent","text":""},{"location":"setup/user-model/#user","title":"User","text":"<p>Once a user is authenticated, a table in the database gets populated. What table? If I didn't modify the Django project, it would be the table represented by <code>auth.User</code>. The following setting however overrides the default:</p> Override default 'auth.User'<pre><code>AUTH_USER_MODEL = \"profiles.User\" # (1)\n</code></pre> <ol> <li> <p>This overrides the default 'auth.User'. See  reference</p> <p>From the  docs:</p> <p>Some kinds of projects may have authentication requirements for which Django\u2019s built-in User model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username.</p> <p>The rationale for overriding the default can be found in a  warning:</p> <p>You cannot change the <code>AUTH_USER_MODEL</code> setting during the lifetime of a project (i.e. once you have made and migrated models that depend on it) without serious effort. It is intended to be set at the project start, and the model it refers to must be available in the first migration of the app that it lives in...</p> <p>Elaborating further:</p> <p>Changing <code>AUTH_USER_MODEL</code> after you\u2019ve created database tables is significantly more difficult since it affects foreign keys and many-to-many relationships, for example.</p> <p>This change can\u2019t be done automatically and requires manually fixing your schema, moving your data from the old user table, and possibly manually reapplying some migrations...</p> </li> </ol>"},{"location":"setup/user-model/#profile","title":"Profile","text":"<p>I don't modify the new overriden <code>User</code> at all, preferring to create a dedicated <code>Profile</code> model / table that details the authenticated <code>User</code>.</p> profiles/models.py: the Profile Model<pre><code>from django.contrib.auth.models import AbstractUser\nclass User(AbstractUser): # AbstractUser: username, email, first_name, last_name\n... # deliberately empty, just an override (just in case)\nclass Profile(TimeStampedModel):\n...\nuser = models.OneToOneField(User, on_delete=models.CASCADE)\nbio = models.TextField(blank=True, null=True)\nimage = models.ImageField(storage=select_storage, blank=True, null=True)\n...\n</code></pre>"},{"location":"setup/user-model/#consent","title":"Consent","text":"<p>The user, more often than not, is asked on signup to agree to the site's terms and conditions prior to proceeding.</p> <p>For purposes of compliance (I'm a lawyer), I'd like to be able to monitor consent and later on be able to make changes to the terms and conditions (and secure later consent for those changes as well). How do I go about this? I create another set of models in the <code>pages</code> app that map agreements to consenting users:</p> /src/pages/models.py: Consent<pre><code>class Agreement(TimeStampedModel, TitleDescriptionModel):\nclass Category(models.TextChoices):\nTERMS = (\"terms\", _(\"Terms of Service\"))\nPRIVACY = (\"privacy\", _(\"Privacy Policy\"))\n... # fields related to the agreement\nclass UserConsent(TimeStampedModel):\nclass Mode(models.TextChoices):\nSIGNUP = (\"signup\", _(\"Account Signup\"))\nSOCIAL = (\"social\", _(\"Social Signup\"))\nPROMPT = (\"prompt\", _(\"Logged-In Prompt\"))\nBANNER = (\"banner\", _(\"Banner Pop-Up\"))\nagreement = models.ForeignKey(Agreement, on_delete=models.CASCADE)\nuser = models.ForeignKey(get_user_model(), on_delete=models.CASCADE)\nmode = models.CharField(\nmax_length=7, choices=Mode.choices, default=Mode.SIGNUP\n)\n</code></pre>"},{"location":"setup/user-model/#consent-profile-on-user-signup","title":"Consent + Profile on User Signup","text":"<p>Putting the User, Profile, and UserConsent together, I override django-allauth adapters for both email and social signup processes.  This is what the overriden social adapter looks like:</p> /src/profiles/adapters.py<pre><code>class ConsentSocialAdapter(DefaultSocialAccountAdapter):\ndef save_user(self, request, sociallogin, form=ConsentSocialForm):\nu = super().save_user(request, sociallogin, form)\nconsent = UserConsent.objects.create(\nuser=u,\nmode=UserConsent.Mode.SOCIAL,\nagreement=Agreement.bind.updated_ver(\"terms\"),\n)\nprofile, _ = Profile.objects.get_or_create(user=u)\nprofile = consent.user.profile  # type: ignore\nprofile.first_name, profile.last_name = (u.first_name, u.last_name)\nprofile.save(update_fields=[\"first_name\", \"last_name\"])\nif not profile.image:  # profile's image field not yet populated\nif url := u.get_social_url():  # type: ignore\nbackground_store_img_url(url, profile.image, profile.im_key)\nreturn u\n</code></pre> <p>In sum, if you want to sign up, regardless of the mode, consent to the terms before registration.</p>"},{"location":"setup/user-model/#user-adjustable-profile-settings","title":"User-Adjustable Profile Settings","text":"Screenshot of the user settings page with various tabs <p>The boilerplate saves time by pre-styling the otherwise vanilla UI templates of django-allauth. The user dashboard can be accessed by creating an account and logging in. In this dashboard, the following areas can be set:</p> Area Description Personal Data name / bio fields Email <code>django-allauth</code>-driven; enables addition and removal of email adds associated with the account Password <code>django-allauth</code>-driven; sets password, for social login accounts, and enables changing it if the password already set Social Login <code>django-allauth</code>-driven; connect, disconnect social accounts Account Settings deletion, user avatar"},{"location":"setup/user-model/#settings-on-the-user-model","title":"Settings on the User Model","text":"<p>Separate settings for auth, email, social</p> Authentication<pre><code>&lt;root&gt;\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 config/ # project named config\n\u251c\u2500\u2500 settings/\n\u251c\u2500\u2500 __init__.py # switch env: dev | test | prod\n\u251c\u2500\u2500 _auth.py # auth, email, social\n\u251c\u2500\u2500 _settings.py # base settings\n\u251c\u2500\u2500 static/\n...\n</code></pre> <p>There are a lot of settings related to authentication. So much so that I think it deserves its own settings file rather than being lumped together with everything else.</p> <p>So for this boilerplate, I separate <code>settings/_auth.py</code> from the base <code>settings/_settings.py</code>. This makes it easier for me to make changes to a file devoted specifically to the user.</p>"}]}